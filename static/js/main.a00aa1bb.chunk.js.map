{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["constructor","val","relative","x","y","cx","ex","rx","ry","rotation","arc","sweep","px","key","Math","React","Square","size","Path","moveTo","lineTo","close","stroke","toElement","Circle","radius","fill","M","m","a","style","SparkLine","width","data","path","strokeWidth","pointDistance","parseInt","length","forEach","index","arr","prev","l","Grid","height","cols","rows","lines","extra","colWidth","rowHeight","Array","from","map","_","down","right","d","toString","App","xmlns","viewBox","transform","href","className","class","ReactDOM","render","document","getElementById"],"mappings":"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GAAIqB,OAAQ,GAAIC,KAAK,UACxC,kBAAC,EAAD,CAAQvB,EAAG,IAAKC,EAAG,GAAIqB,OAAQ,EAAGC,KAAK,UACvC,kBAAC,EAAD,CACEvB,EAAG,GACHC,EAAG,IACH4B,MAAO,IACPC,KAAM,CAAC,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,QAI5D,6BACA,uBAAG+B,KAAK,kDAAR,kDAIA,wBAAIC,UAAU,aAAd,mBACA,mEACA,qDACA,mEACA,sIAIA,oGAGA,wBAAIC,MAAM,aAAV,WACA,gEACA,8DACA,0EAGA,8EAIA,wBAAIA,MAAM,aAAV,iBACA,wHAKA,4BACE,4BACE,gCADF,IACW,mEADX,KAGA,4BACE,gCADF,IACW,mEADX,KAGA,4BACE,gCADF,IACW,yDADX,KAGA,4BACE,gCADF,IACW,yDADX,KAGA,4BACE,gCADF,IACW,gCADX,KAGA,4BACE,gCADF,IACW,gCADX,KAGA,4BACE,gCADF,IACW,mCADX,KAGA,4BACE,gCADF,IACW,mCADX,KAGA,4BACE,gCADF,IACW,mCADX,KAGA,4BACE,gCADF,IACW,mCADX,KAGA,4BACE,gCADF,IACW,6CADX,KAGA,4BACE,gCADF,IACW,6CADX,KAGA,4BACE,gCADF,IACW,6CADX,KAGA,4BACE,gCADF,IACW,6CADX,KAGA,4BACE,gCADF,IACW,qCADX,KAGA,4BACE,gCADF,IACW,qCADX,KAGA,4BACE,gCADF,IACW,gCADX,KAGA,4BACE,gCADF,IACW,gCADX,MAIF,kNAKA,4BACE,4BACE,kCADF,IAEE,qFAFF,IAGE,4BACE,qHAEwB,mCAI5B,4BACE,uCADF,IACkB,+DADlB,IAEE,4BACE,qHAEwB,mCAI5B,4BACE,2CADF,IACsB,kDADtB,IAEE,4BACE,qHAEwB,mCAI5B,4BACE,qCADF,IACgB,qDADhB,IAEE,4BACE,qHAEwB,mCAI5B,4BACE,qCADF,IACgB,qDADhB,IAEE,4BACE,qHAEwB,mCAI5B,4BACE,uCADF,IACkB,+DADlB,IAEE,4BACE,qHAEwB,mCAI5B,4BACE,uCADF,IACkB,+DADlB,IAEE,4BACE,qHAEwB,mCAI5B,4BACE,yCADF,IACoB,kDADpB,IAEE,4BACE,qHAEwB,oCAM9B,oEACA,4BACE,4BACE,mCADF,IACc,iCADd,KAGA,4BACE,2EAEF,4BACE,iCADF,IACY,iCADZ,KAGA,4BACE,yEAEF,4BACE,oCADF,IACe,iCADf,KAGA,4BACE,4EAEF,4BACE,mCADF,IACc,iCADd,KAGA,4BACE,2EAEF,4BACE,mCADF,IACc,iCADd,KAGA,4BACE,mGAIF,4BACE,iCADF,IACY,iCADZ,KAGA,4BACE,iGAIF,4BACE,oCADF,IACe,iCADf,KAGA,4BACE,oGAIF,4BACE,mCADF,IACc,iCADd,KAGA,4BACE,oGAKJ,2DACA,4BACE,4BACE,oCADF,MAGA,4BACE,wHAOJ,wBAAIA,MAAM,aAAV,mBACA,2JAEyD,mCAAY,IAFrE,WAKA,4BACE,4BACE,mCADF,IACc,yCADd,KAGA,4BACE,wGAMJ,yDACA,4BACE,4BACE,mCADF,IACc,kCADd,KAGA,4BACE,qCADF,IACgB,kCADhB,KAGA,4BACE,0CADF,IACqB,kCADrB,KAGA,4BACE,oCADF,IACe,kCADf,MAIF,wBAAIA,MAAM,aAAV,aACA,qHAGE,4BACE,4BACE,sCACA,4BACE,mEAGJ,4BACE,uCACA,4BACE,mEAGJ,4BACE,wCACA,4BACE,sEAGJ,4BACE,+CACA,4BACE,iFClYdC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.a00aa1bb.chunk.js","sourcesContent":["import React from 'react';\n\nclass Path extends React.Component {\n  constructor() {\n    super();\n    this.pathData = [];\n    this.attributes = {};\n\n    return this;\n  }\n\n  attr = (key, val) => {\n    this.attributes[key] = val;\n    return this;\n  };\n\n  fill = (val) => this.attr('fill', val);\n  stroke = (val) => this.attr('stroke', val);\n  strokeWidth = (val) => this.attr('strokeWidth', val);\n  style = (val) => this.attr('style', val);\n  /**\n   * Move svg cursor to x, y.\n   */\n  m = (x, y) => this.moveTo(x, y, true);\n  M = (x, y) => this.moveTo(x, y);\n  moveTo = (x, y, relative = false) => {\n    this.pathData.push(`${relative ? 'm' : 'M'}${x} ${y}`);\n    return this;\n  };\n\n  /**\n   * Draw straight line to x, y.\n   */\n  l = (x, y) => this.lineTo(x, y, true);\n  L = (x, y) => this.lineTo(x, y);\n  lineTo = (x, y, relative = false) => {\n    this.pathData.push(`${relative ? 'l' : 'L'}${x} ${y}`);\n    return this;\n  };\n\n  /**\n   * Draw a horizontal line to x.\n   */\n  H = (x) => this.horizontalTo(x);\n  h = (x) => this.horizontalTo(x, true);\n  horizontalTo = (x, relative = false) => {\n    this.pathData.push(`${relative ? 'h' : 'H'}${x}`);\n    return this;\n  };\n\n  /**\n   * Draw a vertical line to y.\n   */\n  V = (y) => this.verticalTo(y);\n  v = (y) => this.verticalTo(y, true);\n  verticalTo = (x, relative = false) => {\n    this.pathData.push(`${relative ? 'v' : 'V'}${x}`);\n    return this;\n  };\n\n  /**\n   * Draw quadratic curve to ex, ey using cx,cy as the control point.\n   */\n  Q = (cx, cy, ex, ey) => this.qCurveTo(cx, cy, ex, ey);\n  q = (cx, cy, ex, ey) => this.qCurveTo(cx, cy, ex, ey, true);\n  qCurveTo = (cx, cy, ex, ey, relative = false) => {\n    this.pathData.push(`${relative ? 'q' : 'Q'}${cx} ${cy}`);\n    this.pathData.push(`${ex} ${ey}`);\n    return this;\n  };\n\n  T = (ex, ey) => {\n    this.pathData.push(`T ${ex} ${ey}`);\n    return this;\n  };\n\n  t = (ex, ey) => {\n    this.pathData.push(`t ${ex} ${ey}`);\n    return this;\n  };\n\n  S = (cx, cy, ex, ey) => this.sCurveTo(cx, cy, ex, ey);\n  s = (cx, cy, ex, ey) => this.sCurveTo(cx, cy, ex, ey, true);\n  sCurveTo = (cx, cy, ex, ey, relative = false) => {\n    this.pathData.push(`${relative ? 's' : 'S'}${cx} ${cy}`);\n    this.pathData.push(`${ex} ${ey}`);\n    return this;\n  };\n\n  C = (cx1, cy1, cx2, cy2, ex, ey) => this.cCurveTo(cx1, cy1, cx2, cy2, ex, ey);\n  c = (cx1, cy1, cx2, cy2, ex, ey) =>\n    this.cCurveTo(cx1, cy1, cx2, cy2, ex, ey, true);\n\n  cCurveTo = (cx, cy, ex, ey, relative = false) => {\n    this.pathData.push(`${relative ? 's' : 'S'}${cx} ${cy}`);\n    this.pathData.push(`${ex} ${ey}`);\n    return this;\n  };\n\n  A = (rx, ry, rotation, arc, sweep, ex, ey) =>\n    this.arc(rx, ry, rotation, arc, sweep, ex, ey);\n\n  a = (rx, ry, rotation, arc, sweep, ex, ey) =>\n    this.arc(rx, ry, rotation, arc, sweep, ex, ey, true);\n\n  arc = (rx, ry, rotation, arc, sweep, ex, ey, relative = false) => {\n    this.pathData.push(\n      `${\n        relative ? 'a' : 'A'\n      }${rx} ${ry} ${rotation} ${arc} ${sweep} ${ex} ${ey}`\n    );\n    return this;\n  };\n\n  down = (px) => this.v(px);\n  up = (px) => this.v(px * -1);\n  right = (px) => this.h(px);\n  left = (px) => this.h(px * -1);\n\n  Down = (px) => this.V(px);\n  Up = (px) => this.V(px * -1);\n  Right = (px) => this.H(px);\n  Left = (px) => this.H(px * -1);\n\n  /**\n   * Close path.\n   */\n  close = () => {\n    this.pathData.push('z');\n    return this;\n  };\n\n  /**\n   * Return pathData array.\n   */\n  toArray = () => this.pathData;\n\n  /**\n   * Return joined pathData array.\n   */\n  toString = () => this.pathData.join(' ');\n\n  toComponent = (key) => () => this.toElement(key);\n\n  toElement = (key = Math.random()) => (\n    <path key={key} d={this.toString()} {...this.attributes} />\n  );\n}\n\nexport default Path;\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport './App.css';\n\nconst Square = ({ x, y, size }) => {\n  const path = new Path()\n    .moveTo(x, y)\n    .lineTo(x + size, y)\n    .lineTo(x + size, y + size)\n    .lineTo(x, y + size)\n    .close()\n    .stroke('red');\n  return path.toElement();\n};\n\n/**\n *\n * Draws a circle using react-svg-path\n */\nconst Circle = ({ x, y, radius, fill }) => {\n  const path = new Path()\n    .M(x, y)\n    .m(-radius, 0)\n    .a(radius, radius, 0, 1, 0, radius * 2, 0)\n    .a(radius, radius, 0, 1, 0, -(radius * 2), 0)\n    .style({ fill });\n  return path.toElement();\n};\n\n/**\n *\n * Draws a spack line using react-svg-path\n */\nconst SparkLine = ({ x, y, width, data }) => {\n  const path = new Path().moveTo(x, y).stroke('purple').strokeWidth(2);\n  const pointDistance = parseInt(width / data.length);\n  data.forEach((val, index, arr) => {\n    if (index !== 0) {\n      const prev = arr[index - 1];\n      path.l(pointDistance, prev - val);\n    } else {\n      path.l(0, -val);\n    }\n  });\n  return path.toElement();\n};\n\n/**\n *\n * Draws a grid using react-svg-path\n */\nconst Grid = ({ x, y, width, height, cols, rows, close = true }) => {\n  const lines = new Path().M(x, y);\n  const extra = close ? 1 : 0;\n  const colWidth = width / cols;\n  const rowHeight = height / rows;\n  Array.from({ length: cols + extra }).map((_, index) =>\n    lines.M(x + index * colWidth, y).down(height)\n  );\n  Array.from({ length: rows + extra }).map((_, index) =>\n    lines.M(x, y + index * rowHeight, y).right(width)\n  );\n  return <path d={lines.toString()} stroke='#eee' />;\n};\n\nconst App = () => {\n  const width = 500;\n  const height = 500;\n  return (\n    <>\n      <h2>react-svg-path</h2>\n      <svg\n        xmlns='http://www.w3.org/2000/svg'\n        width={width}\n        height={height}\n        viewBox={`0 0 ${width} ${height}`}\n      >\n        <Grid x={0} y={0} width={width} height={height} cols={25} rows={25} />\n        <g transform='translate(105,125)'>\n          <Square x={50} y={50} size={50} />\n          <Circle x={200} y={75} radius={50} fill='green' />\n          <Circle x={215} y={90} radius={25} fill='white' />\n          <Circle x={220} y={90} radius={15} fill='black' />\n          <Circle x={215} y={80} radius={5} fill='white' />\n          <SparkLine\n            x={25}\n            y={200}\n            width={250}\n            data={[0, 10, 5, 25, 15, 35, 5, 18, 50, 3, 25, 2, 35, 10]}\n          />\n        </g>\n      </svg>\n      <hr />\n      <a href='https://github.com/joemaddalone/react-svg-path'>\n        https://github.com/joemaddalone/react-svg-path\n      </a>\n\n      <h2 className='ui-header'>Getting started</h2>\n      <code>npm install --save react-svg-path</code>\n      <p>then in your own code:</p>\n      <code>import Path from 'react-svg-path'</code>\n      <p>\n        react-svg-path is mostly helpful for building the commands needed for\n        the \"d\" attribute of an svg path.\n      </p>\n      <p>\n        Most methods are direct translations from the SVG Path specification.\n      </p>\n      <h4 class='ui-header'>Example</h4>\n      <code>&lt;path d=\"M0 0, L0 100\">&lt;/path></code>\n      <b>This path can be produced with:</b>\n      <code>\n        const path = new Path().M(0,0).L(0,100);\n      </code>\n      <code>\n      console.log(path.toString()) //\n        M0 0, L0 100\n      </code>\n      <h3 class='ui-header'>Path Commands</h3>\n      <p>\n        So for every svg path command there is an equivalent command available\n        in react-svg-path.\n      </p>\n\n      <ul>\n        <li>\n          <b>A</b>(<i>rx, ry, rotation, arc, sweep, ex, ey</i>)\n        </li>\n        <li>\n          <b>a</b>(<i>rx, ry, rotation, arc, sweep, ex, ey</i>)\n        </li>\n        <li>\n          <b>C</b>(<i>cx1, cy1, cx2, cy2, ex, ey</i>)\n        </li>\n        <li>\n          <b>c</b>(<i>cx1, cy1, cx2, cy2, ex, ey</i>)\n        </li>\n        <li>\n          <b>H</b>(<i>x</i>)\n        </li>\n        <li>\n          <b>h</b>(<i>x</i>)\n        </li>\n        <li>\n          <b>L</b>(<i>x, y</i>)\n        </li>\n        <li>\n          <b>l</b>(<i>x, y</i>)\n        </li>\n        <li>\n          <b>M</b>(<i>x, y</i>)\n        </li>\n        <li>\n          <b>m</b>(<i>x, y</i>)\n        </li>\n        <li>\n          <b>Q</b>(<i>cx, cy, ex, ey</i>)\n        </li>\n        <li>\n          <b>q</b>(<i>cx, cy, ex, ey</i>)\n        </li>\n        <li>\n          <b>S</b>(<i>cx, cy, ex, ey</i>)\n        </li>\n        <li>\n          <b>s</b>(<i>cx, cy, ex, ey</i>)\n        </li>\n        <li>\n          <b>T</b>(<i>ex, ey</i>)\n        </li>\n        <li>\n          <b>t</b>(<i>ex, ey</i>)\n        </li>\n        <li>\n          <b>V</b>(<i>y</i>)\n        </li>\n        <li>\n          <b>v</b>(<i>y</i>)\n        </li>\n      </ul>\n      <p>\n        And then for most of these is there is a semantically named helper\n        method. Not required, but for complex paths it may be easier to read for\n        those not familiar with path commmands.\n      </p>\n      <ul>\n        <li>\n          <b>arc</b>(\n          <i>rx, ry, rotation, arc, sweep, ex, ey, relative = false</i>)\n          <ul>\n            <li>\n              relative is optional, its default is false. Setting relative to\n              true is equivalent to <b>a</b>\n            </li>\n          </ul>\n        </li>\n        <li>\n          <b>cCurveTo</b>(<i>cx, cy, ex, ey, relative = false</i>)\n          <ul>\n            <li>\n              relative is optional, its default is false. Setting relative to\n              true is equivalent to <b>c</b>\n            </li>\n          </ul>\n        </li>\n        <li>\n          <b>horizontalTo</b>(<i>x, relative = false</i>)\n          <ul>\n            <li>\n              relative is optional, its default is false. Setting relative to\n              true is equivalent to <b>h</b>\n            </li>\n          </ul>\n        </li>\n        <li>\n          <b>lineTo</b>(<i>x, y, relative = false</i>)\n          <ul>\n            <li>\n              relative is optional, its default is false. Setting relative to\n              true is equivalent to <b>l</b>\n            </li>\n          </ul>\n        </li>\n        <li>\n          <b>moveTo</b>(<i>x, y, relative = false</i>)\n          <ul>\n            <li>\n              relative is optional, its default is false. Setting relative to\n              true is equivalent to <b>m</b>\n            </li>\n          </ul>\n        </li>\n        <li>\n          <b>qCurveTo</b>(<i>cx, cy, ex, ey, relative = false</i>)\n          <ul>\n            <li>\n              relative is optional, its default is false. Setting relative to\n              true is equivalent to <b>q</b>\n            </li>\n          </ul>\n        </li>\n        <li>\n          <b>sCurveTo</b>(<i>cx, cy, ex, ey, relative = false</i>)\n          <ul>\n            <li>\n              relative is optional, its default is false. Setting relative to\n              true is equivalent to <b>s</b>\n            </li>\n          </ul>\n        </li>\n        <li>\n          <b>verticalTo</b>(<i>x, relative = false</i>)\n          <ul>\n            <li>\n              relative is optional, its default is false. Setting relative to\n              true is equivalent to <b>v</b>\n            </li>\n          </ul>\n        </li>\n      </ul>\n\n      <p>Some additional path command helpers:</p>\n      <ul>\n        <li>\n          <b>down</b>(<i>px</i>)\n        </li>\n        <ul>\n          <li>Draw line from current position down by px</li>\n        </ul>\n        <li>\n          <b>up</b>(<i>px</i>)\n        </li>\n        <ul>\n          <li>Draw line from current position up by px</li>\n        </ul>\n        <li>\n          <b>right</b>(<i>px</i>)\n        </li>\n        <ul>\n          <li>Draw line from current position right by px</li>\n        </ul>\n        <li>\n          <b>left</b>(<i>px</i>)\n        </li>\n        <ul>\n          <li>Draw line from current position left by px</li>\n        </ul>\n        <li>\n          <b>Down</b>(<i>px</i>)\n        </li>\n        <ul>\n          <li>\n            Draw line from current position down to an absolute position of px\n          </li>\n        </ul>\n        <li>\n          <b>Up</b>(<i>px</i>)\n        </li>\n        <ul>\n          <li>\n            Draw line from current position up to an absolute position of px\n          </li>\n        </ul>\n        <li>\n          <b>Right</b>(<i>px</i>)\n        </li>\n        <ul>\n          <li>\n            Draw line from current position right to an absolute position of px\n          </li>\n        </ul>\n        <li>\n          <b>Left</b>(<i>px</i>)\n        </li>\n        <ul>\n          <li>\n            Draw line from current position left to an absolute position of px\n          </li>\n        </ul>\n      </ul>\n      <p>One more path command helper</p>\n      <ul>\n        <li>\n          <b>close</b>()\n        </li>\n        <ul>\n          <li>\n            Produces a \"Z\" command which draws a stright line back to the first\n            point of the path.\n          </li>\n        </ul>\n      </ul>\n\n      <h3 class='ui-header'>Path Attributes</h3>\n      <p>\n        If you intend to output an actual path element ad not just the set of\n        commands attrubtes can be set on the element using the <b>attr</b>{' '}\n        helper.\n      </p>\n      <ul>\n        <li>\n          <b>attr</b>(<i>key, value</i>)\n        </li>\n        <ul>\n          <li>\n            example: attr('id', 'my-id') will result in &lt;path\n            id=\"my-id\">&lt;/path>\n          </li>\n        </ul>\n      </ul>\n      <p>Built-in attribute helpers</p>\n      <ul>\n        <li>\n          <b>fill</b>(<i>val</i>)\n        </li>\n        <li>\n          <b>stroke</b>(<i>val</i>)\n        </li>\n        <li>\n          <b>strokeWidth</b>(<i>val</i>)\n        </li>\n        <li>\n          <b>style</b>(<i>val</i>)\n        </li>\n      </ul>\n      <h3 class='ui-header'>Rendering</h3>\n      <p>\n        Depending on your needs there are few ways to use the data generated by\n        react-svg-path.\n        <ul>\n          <li>\n            <b>toArray</b>\n            <ul>\n              <li>Returns an array of path commands</li>\n            </ul>\n          </li>\n          <li>\n            <b>toString</b>\n            <ul>\n              <li>Returns a string of path commands</li>\n            </ul>\n          </li>\n          <li>\n            <b>toElement</b>\n            <ul>\n              <li>Returns path jsx incuding attributes</li>\n            </ul>\n          </li>\n          <li>\n            <b>toComponent(key)</b>\n            <ul>\n              <li>same as toElement, but you can assign a key</li>\n            </ul>\n          </li>\n        </ul>\n      </p>\n    </>\n  );\n};\n\nexport default App;\n","\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}