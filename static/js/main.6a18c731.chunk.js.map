{"version":3,"sources":["../../src/index.js","components/Square.js","components/Circle.js","components/Grid.js","components/Sparkline.js","components/Svg.js","components/demos/Steps.js","components/demos/dagSetup.js","components/demos/DagSinglePath.js","components/demos/DagTwoPaths.js","components/demos/DagNodes.js","App.js","index.js"],"names":["Path","relative","ex","px","d","key","Math","React","Component","Square","x","y","size","rest","moveTo","right","down","left","close","toComponent","Circle","radius","fill","M","m","a","style","Grid","width","height","cols","rows","lines","extra","colWidth","rowHeight","Array","from","length","map","_","index","toString","stroke","Sparkline","data","path","strokeWidth","pointDistance","parseInt","forEach","val","arr","prev","l","toElement","Svg","children","xmlns","viewBox","Steps","useState","currentPath","setCurrentPath","pathArray","setPathArray","useEffect","shiftRight","abs","toArray","newPath","timeout","curLength","tmp","slice","setTimeout","shapeRendering","setupDag","g","dagre","graphlib","Graph","setGraph","rankdir","marginx","marginy","nodesep","ranksep","edgesep","setDefaultEdgeLabel","items","split","item","setNode","setEdge","layout","nodes","node","edges","edge","graph","dag","dagSetup","DagSinglePath","p","points","shift","point","L","up","createPath","createConnectors","createNodes","DagNodes","squareNodes","circleNodes","cursor","onClick","alert","stepData","stepHeight","min","max","stepY","CommandList","section","Object","keys","docs","command","args","join","description","dangerouslySetInnerHTML","__html","App","transform","href","className","rel","target","margin","DagTwoPaths","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6a18c731.chunk.js","sourcesContent":["import React from 'react';\n\nclass Path extends React.Component {\n  constructor() {\n    super();\n    this.pathData = [];\n    this.attributes = {};\n\n    return this;\n  }\n\n  attr = (key, val) => {\n    this.attributes[key] = val;\n    return this;\n  };\n\n  fill = (val) => this.attr('fill', val);\n  stroke = (val) => this.attr('stroke', val);\n  strokeWidth = (val) => this.attr('strokeWidth', val);\n  style = (val) => this.attr('style', val);\n  /**\n   * Move svg cursor to x, y.\n   */\n  m = (x, y) => this.moveTo(x, y, true);\n  M = (x, y) => this.moveTo(x, y);\n  moveTo = (x, y, relative = false) => {\n    this.pathData.push(`${relative ? 'm' : 'M'}${x} ${y}`);\n    return this;\n  };\n\n  /**\n   * Draw straight line to x, y.\n   */\n  l = (x, y) => this.lineTo(x, y, true);\n  L = (x, y) => this.lineTo(x, y);\n  lineTo = (x, y, relative = false) => {\n    this.pathData.push(`${relative ? 'l' : 'L'}${x} ${y}`);\n    return this;\n  };\n\n  /**\n   * Draw a horizontal line to x.\n   */\n  H = (x) => this.horizontalTo(x);\n  h = (x) => this.horizontalTo(x, true);\n  horizontalTo = (x, relative = false) => {\n    this.pathData.push(`${relative ? 'h' : 'H'}${x}`);\n    return this;\n  };\n\n  /**\n   * Draw a vertical line to y.\n   */\n  V = (y) => this.verticalTo(y);\n  v = (y) => this.verticalTo(y, true);\n  verticalTo = (x, relative = false) => {\n    this.pathData.push(`${relative ? 'v' : 'V'}${x}`);\n    return this;\n  };\n\n  /**\n   * Draw quadratic curve to ex, ey using cx,cy as the control point.\n   */\n  Q = (cx, cy, ex, ey) => this.qCurveTo(cx, cy, ex, ey);\n  q = (cx, cy, ex, ey) => this.qCurveTo(cx, cy, ex, ey, true);\n  qCurveTo = (cx, cy, ex, ey, relative = false) => {\n    this.pathData.push(`${relative ? 'q' : 'Q'}${cx} ${cy}`);\n    this.pathData.push(`${ex} ${ey}`);\n    return this;\n  };\n\n  T = (ex, ey) => {\n    this.pathData.push(`T ${ex} ${ey}`);\n    return this;\n  };\n\n  t = (ex, ey) => {\n    this.pathData.push(`t ${ex} ${ey}`);\n    return this;\n  };\n\n  S = (cx, cy, ex, ey) => this.sCurveTo(cx, cy, ex, ey);\n  s = (cx, cy, ex, ey) => this.sCurveTo(cx, cy, ex, ey, true);\n  sCurveTo = (cx, cy, ex, ey, relative = false) => {\n    this.pathData.push(`${relative ? 's' : 'S'}${cx} ${cy}`);\n    this.pathData.push(`${ex} ${ey}`);\n    return this;\n  };\n\n  C = (cx1, cy1, cx2, cy2, ex, ey) => this.cCurveTo(cx1, cy1, cx2, cy2, ex, ey);\n  c = (cx1, cy1, cx2, cy2, ex, ey) =>\n    this.cCurveTo(cx1, cy1, cx2, cy2, ex, ey, true);\n\n  cCurveTo = (cx, cy, ex, ey, relative = false) => {\n    this.pathData.push(`${relative ? 's' : 'S'}${cx} ${cy}`);\n    this.pathData.push(`${ex} ${ey}`);\n    return this;\n  };\n\n  A = (rx, ry, rotation, arc, sweep, ex, ey) =>\n    this.arc(rx, ry, rotation, arc, sweep, ex, ey);\n\n  a = (rx, ry, rotation, arc, sweep, ex, ey) =>\n    this.arc(rx, ry, rotation, arc, sweep, ex, ey, true);\n\n  arc = (rx, ry, rotation, arc, sweep, ex, ey, relative = false) => {\n    this.pathData.push(\n      `${\n        relative ? 'a' : 'A'\n      }${rx} ${ry} ${rotation} ${arc} ${sweep} ${ex} ${ey}`\n    );\n    return this;\n  };\n\n  down = (px) => this.v(px);\n  up = (px) => this.v(px * -1);\n  right = (px) => this.h(px);\n  left = (px) => this.h(px * -1);\n\n  /**\n   * Close path.\n   */\n  close = () => {\n    this.pathData.push('z');\n    return this;\n  };\n\n  /**\n   * Return pathData array.\n   */\n  toArray = () => this.pathData;\n\n  /**\n   * Return joined pathData array.\n   */\n  toString = () => this.pathData.join(' ');\n\n  toComponent = (props) => (\n    <path d={this.toString()} {...this.attributes} {...props} />\n  );\n\n  toElement = (key = Math.random()) => (\n    <path key={key} d={this.toString()} {...this.attributes} />\n  );\n}\n\nexport default Path;\n","import Path from 'react-svg-path';\n\nconst Square = ({ x, y, size, ...rest }) => {\n  const path = new Path()\n    .moveTo(x, y)\n    .right(size)\n    .down(size)\n    .left(size)\n    .close()\n  return path.toComponent(rest);\n};\n\nexport default Square;\n","import Path from 'react-svg-path';\n\nconst Circle = ({ x, y, radius, fill, ...rest }) => {\n  const path = new Path()\n    .M(x, y)\n    .m(-radius, 0)\n    .a(radius, radius, 0, 1, 0, radius * 2, 0)\n    .a(radius, radius, 0, 1, 0, -(radius * 2), 0)\n    .style({ fill });\n  return path.toComponent(rest);\n};\n\nexport default Circle;\n","import React from 'react';\nimport Path from 'react-svg-path';\n\nconst Grid = ({ x, y, width, height, cols, rows, close = true }) => {\n  const lines = new Path().M(x, y);\n  const extra = close ? 1 : 0;\n  const colWidth = width / cols;\n  const rowHeight = height / rows;\n  Array.from({ length: cols + extra }).map((_, index) =>\n    lines.M(x + index * colWidth, y).down(height)\n  );\n  Array.from({ length: rows + extra }).map((_, index) =>\n    lines.M(x, y + index * rowHeight, y).right(width)\n  );\n  return <path d={lines.toString()} stroke='#eee' />;\n};\n\nexport default Grid;\n","import Path from 'react-svg-path';\n\nconst Sparkline = ({ x, y, width, data }) => {\n  const path = new Path().moveTo(x, y).stroke('purple').strokeWidth(2);\n  const pointDistance = parseInt(width / data.length);\n  data.forEach((val, index, arr) => {\n    if (index !== 0) {\n      const prev = arr[index - 1];\n      path.l(pointDistance, prev - val);\n    } else {\n      path.l(0, -val);\n    }\n  });\n  return path.toElement();\n};\n\nexport default Sparkline;\n","import React from 'react';\n\nconst Svg = ({ children, width, height }) => {\n  return (\n    <svg\n      xmlns='http://www.w3.org/2000/svg'\n      width={width}\n      height={height}\n      viewBox={`0 0 ${width} ${height}`}\n    >\n      {children}/\n    </svg>\n  );\n};\n\nexport default Svg;\n","import React, { useEffect, useState } from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../Svg';\n\nconst Steps = ({ width, height, x, y, data, ...rest }) => {\n  const [currentPath, setCurrentPath] = useState([]);\n  const [pathArray, setPathArray] = useState([]);\n\n  const steps = 10;\n  useEffect(() => {\n    const path = new Path().moveTo(x, y);\n    const radius = 5;\n\n    const pointDistance = parseInt(width / data.length) - radius * 2;\n    const shiftRight = pointDistance / 3;\n    data.forEach((val, index, arr) => {\n      const prev = index === 0 ? 0 : arr[index - 1];\n      for (let index = 0; index < steps; index++) {\n        path[prev > val ? 'down' : 'up'](Math.abs(prev - val) / steps);\n      }\n\n      for (let index = 0; index < steps; index++) {\n        path.right(shiftRight / steps);\n      }\n      path\n        .a(radius, radius, 0, 1, 0, radius * 2, 0)\n        .a(radius, radius, 0, 1, 0, -(radius * 2), 0)\n        .m(radius * 2, 0);\n\n      if (index !== arr.length - 1) {\n        for (let index = 0; index < steps; index++) {\n          path.right(shiftRight / steps);\n        }\n      }\n    });\n    setPathArray(path.toArray());\n  }, [data, width, x, y]);\n\n  useEffect(() => {\n    if (pathArray?.length) {\n      const curLength = currentPath.length;\n      const pathLength = pathArray.length;\n      let newPath;\n      let timeout;\n      if (curLength === pathLength) {\n        newPath = [pathArray[0]];\n        timeout = 1000;\n      } else {\n        const tmp = pathArray.slice(0, curLength + 1);\n        newPath = tmp;\n        timeout = 10;\n      }\n      setTimeout(() => setCurrentPath(newPath), timeout);\n    }\n  }, [currentPath, pathArray]);\n\n  return (\n    <Svg width={width} height={height}>\n      <path d={currentPath} stroke='#222' strokeWidth={0.5} shapeRendering=\"geometricPrecision\" />\n    </Svg>\n  );\n};\n\nexport default Steps;\n","import dagre from 'dagre';\n\nconst setupDag = () => {\n  var g = new dagre.graphlib.Graph();\n  g.setGraph({\n    rankdir: 'BT',\n    marginx: 15,\n    marginy: 50,\n    nodesep: 10,\n    ranksep: 50,\n    edgesep: 5\n  });\n\n  g.setDefaultEdgeLabel(function () {\n    return {};\n  });\n\n  const items = 'abcdefghijklmnopqrstuvwxyz'.split('');\n  items.forEach((item) => g.setNode(item, { width: 25, height: 25 }));\n  items.forEach((item, index, arr) => {\n    if (index === 0) {\n      return;\n    }\n    if (index < 5) {\n      g.setEdge(item, 'a');\n    } else if (index < 9) {\n      g.setEdge(item, 'b');\n    } else if (index < 15) {\n      g.setEdge(item, 'c');\n    } else if (index < 19) {\n      g.setEdge(item, 'd');\n    } else {\n      g.setEdge(item, 'e');\n    }\n  });\n\n  dagre.layout(g);\n\n  return {\n    nodes: g.nodes().map((node) => g.node(node)),\n    edges: g.edges().map((edge) => g.edge(edge)),\n    graph: g.graph()\n  };\n};\n\nexport default setupDag;\n\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport dagSetup from './dagSetup';\nimport Svg from '../Svg';\n\nconst dag = dagSetup();\n\nconst DagSinglePath = () => {\n  const createPath = () => {\n    const { edges, nodes } = dag;\n    const p = new Path();\n    edges.forEach(({ points, x, y }) => {\n      const m = points.shift();\n      p.M(m.x, m.y);\n      points.forEach((point) => p.L(point.x, point.y));\n    });\n    nodes.forEach(({ width, height, x, y }) => {\n      p.M(x - width / 2, y - height / 2)\n        .right(width)\n        .down(height)\n        .left(width)\n        .up(height);\n    });\n\n    return p.toString();\n  };\n\n  return (\n    <Svg width={dag.graph.width} height={dag.graph.height}>\n      <path stroke='#222' strokeWidth={0.5} d={createPath()} />\n    </Svg>\n  );\n};\n\nexport default DagSinglePath;\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport dagSetup from './dagSetup';\nimport Svg from '../Svg';\n\nconst dag = dagSetup();\n\nconst DagSinglePath = () => {\n  const createNodes = () => {\n    const { nodes } = dag;\n    const p = new Path();\n    nodes.forEach(({ width, height, x, y }) => {\n      p.M(x - width / 2, y - height / 2)\n        .right(width)\n        .down(height)\n        .left(width)\n        .up(height);\n    });\n\n    return p.toString();\n  };\n\n  const createConnectors = () => {\n    const { edges } = dag;\n    const p = new Path();\n    edges.forEach(({ points, x, y }) => {\n      const m = points.shift();\n      p.M(m.x, m.y);\n      points.forEach((point) => p.L(point.x, point.y));\n    });\n\n    return p.toString();\n  };\n\n  return (\n    <Svg width={dag.graph.width} height={dag.graph.height}>\n      <path stroke='#222' strokeWidth={1} d={createConnectors()} />\n      <path stroke='red' strokeWidth={1} d={createNodes()} />\n    </Svg>\n  );\n};\n\nexport default DagSinglePath;\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport dagSetup from './dagSetup';\nimport Steps from './Steps'\nimport Svg from '../Svg';\nimport Square from '../Square';\nimport Circle from '../Circle';\n\nconst dag = dagSetup();\n\nconst DagNodes = () => {\n  const createConnectors = () => {\n    const { edges } = dag;\n    const p = new Path();\n    edges.forEach(({ points, x, y }) => {\n      const m = points.shift();\n      p.M(m.x, m.y);\n      points.forEach((point) => p.L(point.x, point.y));\n    });\n\n    return p.toString();\n  };\n\n  const squareNodes = dag.nodes.slice(0, 5);\n  const circleNodes = dag.nodes.slice(5);\n\n  return (\n    <Svg width={dag.graph.width} height={dag.graph.height}>\n      <path stroke='#222' strokeWidth={1} d={createConnectors()} />\n      {squareNodes.map(({ x, y, width }, index) => {\n        return (\n          <Square\n            key={index}\n            x={x - width / 2}\n            y={y - width / 2}\n            size={width}\n            style={{ fill: 'rebeccapurple', cursor: 'pointer' }}\n            onClick={() => alert(`clicked node #${index}`)}\n          />\n        );\n      })}\n      {circleNodes.map(({ x, y, width }, index) => {\n        return (\n          <Circle\n            key={index}\n            x={x}\n            y={y}\n            radius={width / 2}\n            style={{ fill: 'purple', cursor: 'pointer' }}\n            onClick={() => alert(`clicked node #${index+5}`)}\n          />\n        );\n      })}\n    </Svg>\n  );\n};\n\nexport default DagNodes;\n","import React from 'react';\nimport Square from './components/Square';\nimport Circle from './components/Circle';\nimport Grid from './components/Grid';\nimport Sparkline from './components/Sparkline';\nimport Svg from './components/Svg';\nimport Steps from './components/demos/Steps';\nimport DagSinglePath from './components/demos/DagSinglePath';\nimport DagTwoPaths from './components/demos/DagTwoPaths';\nimport DagNodes from './components/demos/DagNodes';\n\nimport docs from './docs/docs.json';\nimport './App.css';\n\nconst stepData = [\n  23,\n  -45,\n  100,\n  -100,\n  12,\n  -23,\n  34,\n  -45,\n  56,\n  -67,\n  78,\n  -89,\n  0,\n  0,\n  0,\n  0,\n  10,\n  40,\n  80,\n  120,\n  0\n];\n\nconst stepHeight = Math.abs(Math.min(...stepData) - Math.max(...stepData)) + 50;\nconst stepX = 15;\nconst stepY = stepHeight / 2;\n\nconst CommandList = ({ section }) => (\n  <ul>\n    {Object.keys(docs[section]).map((key) => {\n      const command = docs[section][key];\n      return (\n        <li key={key}>\n          <b>{key}</b>(<i>{command.args.join(',')}</i>){}\n          {command.description && (\n            <ul>\n              <li\n                dangerouslySetInnerHTML={{\n                  __html: command.description\n                }}\n              />\n            </ul>\n          )}\n        </li>\n      );\n    })}\n  </ul>\n);\n\nconst App = () => {\n  return (\n    <>\n      <h2>react-svg-path</h2>\n      <Svg width={400} height={400}>\n        <Grid x={0} y={0} width={500} height={500} cols={25} rows={25} />\n        <g transform='translate(50,75)'>\n          <Square\n            x={50}\n            y={50}\n            size={50}\n            stroke='red'\n            strokeWidth={2}\n            fill='red'\n          />\n          <Circle x={200} y={75} radius={50} fill='green' />\n          <Circle x={215} y={90} radius={25} fill='white' />\n          <Circle x={220} y={90} radius={15} fill='black' />\n          <Circle x={215} y={80} radius={5} fill='white' />\n          <Sparkline\n            x={25}\n            y={200}\n            width={250}\n            data={[0, 10, 5, 25, 15, 35, 5, 18, 50, 3, 25, 2, 35, 10]}\n          />\n        </g>\n      </Svg>\n      <hr />\n      <a href='https://github.com/joemaddalone/react-svg-path'>\n        https://github.com/joemaddalone/react-svg-path\n      </a>\n\n      <h2 className='ui-header'>Getting started</h2>\n      <code>npm install --save react-svg-path</code>\n      <p>then in your own code:</p>\n      <code>import Path from 'react-svg-path'</code>\n      <p>\n        react-svg-path is mostly helpful for building the commands needed for\n        the \"d\" attribute of an svg path.\n      </p>\n      <p>\n        Most methods are direct translations from the{' '}\n        <a\n          rel='noopener noreferrer'\n          href='https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths'\n          target='_blank'\n        >\n          SVG Path specification\n        </a>\n        .\n      </p>\n      <h4 className='ui-header'>Example</h4>\n      <code>&lt;path d=\"M0 0, L0 100\">&lt;/path></code>\n      <b>This path can be produced with:</b>\n      <code>const path = new Path().M(0,0).L(0,100);</code>\n      <code>console.log(path.toString()) // M0 0, L0 100</code>\n      <h3 className='ui-header'>Path Commands</h3>\n      <p>\n        For every svg path command there is an equivalent command available in\n        react-svg-path.\n      </p>\n      <CommandList section='commands' />\n      <p>\n        And then for most of these is there is a semantically named helper\n        method. Not required, but for complex paths it may be easier to read for\n        those not familiar with path commmands.\n      </p>\n      <CommandList section='semanticCommands' />\n      <p>Some additional path command helpers:</p>\n      <CommandList section='helpers' />\n      <p>One more path command helper</p>\n      <ul>\n        <li>\n          <b>close</b>()\n        </li>\n        <ul>\n          <li>\n            Produces a \"Z\" command which draws a stright line back to the first\n            point of the path.\n          </li>\n        </ul>\n      </ul>\n      <h3 className='ui-header'>Path Attributes</h3>\n      <p>\n        If you intend to output an actual path element and not just the set of\n        commands attributes can be set on the element using the <b>attr</b>{' '}\n        helper.\n      </p>\n      <ul>\n        <li>\n          <b>attr</b>(<i>key, value</i>)\n        </li>\n        <ul>\n          <li>\n            example: attr('id', 'my-id') will result in &lt;path\n            id=\"my-id\">&lt;/path>\n          </li>\n        </ul>\n      </ul>\n      <p>Built-in attribute helpers</p>\n      <ul>\n        <li>\n          <b>fill</b>(<i>val</i>)\n        </li>\n        <li>\n          <b>stroke</b>(<i>val</i>)\n        </li>\n        <li>\n          <b>strokeWidth</b>(<i>val</i>)\n        </li>\n        <li>\n          <b>style</b>(<i>val</i>)\n        </li>\n      </ul>\n      <h3 className='ui-header'>Rendering</h3>\n      <p>\n        Depending on your needs there are few ways to use the data generated by\n        react-svg-path.\n      </p>\n      <ul>\n        <li>\n          <b>toArray</b>\n          <ul>\n            <li>Returns an array of path commands</li>\n          </ul>\n        </li>\n        <li>\n          <b>toString</b>\n          <ul>\n            <li>Returns a string of path commands</li>\n          </ul>\n        </li>\n        <li>\n          <b>toElement</b>\n          <ul>\n            <li>Returns path jsx incuding attributes</li>\n          </ul>\n        </li>\n        <li>\n          <b>toComponent(props)</b>\n          <ul>\n            <li>same as toElement, but allows additional props</li>\n          </ul>\n        </li>\n      </ul>\n      <h3 className='ui-header'>Demos</h3>\n      <p>\n        The svg element below contains only a single path. This may not be\n        ideal, depending on your needs, but it demonstrates the ability to\n        create complex shapes in a single path with react-svg-path\n      </p>\n      <div style={{ margin: 20 }}>\n        <DagSinglePath />\n      </div>\n      <p>\n        We can easily convert this to two paths. One for the nodes and one for\n        the connecting lines.\n      </p>\n      <div style={{ margin: 20 }}>\n        <DagTwoPaths />\n      </div>\n      <p>\n        Likewise we can use .toComponent() to create reusable components for\n        each node. Each of these nodes is clickable.\n      </p>\n      <div style={{ margin: 20 }}>\n        <DagNodes />\n      </div>\n      <p>\n        Since we're using React we can also create a simple \"drawing\" effect by\n        iterating over the array produced with .toArray().\n      </p>\n      <div style={{ margin: 20 }}>\n        <Steps\n          x={stepX}\n          y={stepY}\n          width={755}\n          height={stepHeight}\n          data={stepData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}