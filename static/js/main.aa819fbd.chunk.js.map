{"version":3,"sources":["../../src/index.js","components/demos/dag/dagSetup.js","components/helpers/Svg.js","components/demos/dag/DagSinglePath.js","components/demos/dag/DagTwoPaths.js","components/demos/dag/DagNodes.js","components/demos/Macros.js","components/demos/basic/Rect.js","components/demos/basic/Square.js","components/demos/basic/Triangle.js","components/demos/basic/Circle.js","components/demos/basic/Ellipse.js","components/demos/basic/Segment.js","components/demos/basic/Sector.js","components/demos/basic/Polygon.js","components/demos/basic/RegPolygon.js","components/demos/basic/Polyline.js","components/demos/complex/Pie.js","components/demos/complex/Donut.js","components/demos/complex/SparkLine.js","App.js","index.js"],"names":["toComponent","props","this","toString","strokeWidth","val","attr","setupDag","g","dagre","graphlib","Graph","setGraph","rankdir","marginx","marginy","nodesep","ranksep","edgesep","setDefaultEdgeLabel","items","split","forEach","item","setNode","width","height","index","arr","setEdge","layout","nodes","map","node","edges","edge","graph","Svg","children","xmlns","viewBox","dag","dagSetup","DagSinglePath","stroke","d","p","Path","points","x","y","m","shift","M","point","L","right","down","left","up","createPath","createConnectors","createNodes","Square","size","rest","moveTo","close","Circle","radius","fill","a","style","DagNodes","squareNodes","slice","circleNodes","key","cursor","onClick","alert","macro","w","h","l","Macros","squareTest","circleTest","triangleTest","macros","Rect","className","rect","displayName","square","Triangle","triangle","circle","Ellipse","ellipse","Segment","segment","Sector","sector","Polygon","polygon","RegPolygon","regPolygon","pointsAbsolute","pointsRelative","Polyline","polyline","Pie","cx","cy","data","percentToDegree","sectors","total","i","startAngle","endAngle","percent","push","color","Donut","segments","Grid","cols","rows","lines","extra","colWidth","rowHeight","Array","from","length","_","SparkLine","sparkline","zero","pointDistance","parseInt","prev","unshift","reduce","b","App","basicDemos","pieData","nested","href","margin","rel","target","DagTwoPaths","C","pd","flat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa819fbd.chunk.js","sourcesContent":["import React from 'react';\nimport Original from '@joemaddalone/path';\n\nclass Path extends Original {\n  toComponent(props = {}) {\n    return <path d={this.toString()} {...this.attributes} {...props} />;\n  }\n\n  strokeWidth(val) {\n    return this.attr('strokeWidth', val);\n  }\n}\n\nexport default Path;\n","import dagre from 'dagre';\n\nconst setupDag = () => {\n  var g = new dagre.graphlib.Graph();\n  g.setGraph({\n    rankdir: 'BT',\n    marginx: 15,\n    marginy: 50,\n    nodesep: 10,\n    ranksep: 50,\n    edgesep: 5\n  });\n\n  g.setDefaultEdgeLabel(function () {\n    return {};\n  });\n\n  const items = 'abcdefghijklmnopqrstuvwxyz'.split('');\n  items.forEach((item) => g.setNode(item, { width: 25, height: 25 }));\n  items.forEach((item, index, arr) => {\n    if (index === 0) {\n      return;\n    }\n    if (index < 5) {\n      g.setEdge(item, 'a');\n    } else if (index < 9) {\n      g.setEdge(item, 'b');\n    } else if (index < 15) {\n      g.setEdge(item, 'c');\n    } else if (index < 19) {\n      g.setEdge(item, 'd');\n    } else {\n      g.setEdge(item, 'e');\n    }\n  });\n\n  dagre.layout(g);\n\n  return {\n    nodes: g.nodes().map((node) => g.node(node)),\n    edges: g.edges().map((edge) => g.edge(edge)),\n    graph: g.graph()\n  };\n};\n\nexport default setupDag;\n\n","import React from 'react';\n\nconst Svg = ({ children, width, height }) => {\n  return (\n    <svg\n      xmlns='http://www.w3.org/2000/svg'\n      width={width}\n      height={height}\n      viewBox={`0 0 ${width} ${height}`}\n    >\n      {children}/\n    </svg>\n  );\n};\n\nexport default Svg;\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport dagSetup from './dagSetup';\nimport Svg from '../../helpers/Svg';\n\nconst dag = dagSetup();\n\nconst DagSinglePath = () => {\n  const createPath = () => {\n    const { edges, nodes } = dag;\n    const p = new Path();\n    edges.forEach(({ points, x, y }) => {\n      const m = points.shift();\n      p.M(m.x, m.y);\n      points.forEach((point) => p.L(point.x, point.y));\n    });\n    nodes.forEach(({ width, height, x, y }) => {\n      p.M(x - width / 2, y - height / 2)\n        .right(width)\n        .down(height)\n        .left(width)\n        .up(height);\n    });\n\n    return p.toString();\n  };\n\n  return (\n    <Svg width={dag.graph.width} height={dag.graph.height}>\n      <path stroke='#222' strokeWidth={0.5} d={createPath()} />\n    </Svg>\n  );\n};\n\nexport default DagSinglePath;\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport dagSetup from './dagSetup';\nimport Svg from '../../helpers/Svg';\n\nconst dag = dagSetup();\n\nconst DagSinglePath = () => {\n  const createNodes = () => {\n    const { nodes } = dag;\n    const p = new Path();\n    nodes.forEach(({ width, height, x, y }) => {\n      p.M(x - width / 2, y - height / 2)\n        .right(width)\n        .down(height)\n        .left(width)\n        .up(height);\n    });\n\n    return p.toString();\n  };\n\n  const createConnectors = () => {\n    const { edges } = dag;\n    const p = new Path();\n    edges.forEach(({ points, x, y }) => {\n      const m = points.shift();\n      p.M(m.x, m.y);\n      points.forEach((point) => p.L(point.x, point.y));\n    });\n\n    return p.toString();\n  };\n\n  return (\n    <Svg width={dag.graph.width} height={dag.graph.height}>\n      <path stroke='#222' strokeWidth={1} d={createConnectors()} />\n      <path stroke='red' strokeWidth={1} d={createNodes()} />\n    </Svg>\n  );\n};\n\nexport default DagSinglePath;\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport dagSetup from './dagSetup';\nimport Svg from '../../helpers/Svg';\n\nconst dag = dagSetup();\n\nconst Square = ({ x, y, size, ...rest }) => {\n  const path = new Path()\n    .moveTo(x, y)\n    .right(size)\n    .down(size)\n    .left(size)\n    .close();\n  return path.toComponent(rest);\n};\n\nconst Circle = ({ x, y, radius, fill, ...rest }) => {\n  const path = new Path()\n    .M(x, y)\n    .m(-radius, 0)\n    .a(radius, radius, 0, 1, 0, radius * 2, 0)\n    .a(radius, radius, 0, 1, 0, -(radius * 2), 0)\n    .style({ fill });\n  return path.toComponent(rest);\n};\n\nconst DagNodes = () => {\n  const createConnectors = () => {\n    const { edges } = dag;\n    const p = new Path();\n    edges.forEach(({ points, x, y }) => {\n      const m = points.shift();\n      p.M(m.x, m.y);\n      points.forEach((point) => p.L(point.x, point.y));\n    });\n\n    return p.toString();\n  };\n\n  const squareNodes = dag.nodes.slice(0, 5);\n  const circleNodes = dag.nodes.slice(5);\n\n  return (\n    <Svg width={dag.graph.width} height={dag.graph.height}>\n      <path stroke='#222' strokeWidth={1} d={createConnectors()} />\n      {squareNodes.map(({ x, y, width }, index) => {\n        return (\n          <Square\n            key={index}\n            x={x - width / 2}\n            y={y - width / 2}\n            size={width}\n            style={{ fill: 'rebeccapurple', cursor: 'pointer' }}\n            onClick={() => alert(`clicked node #${index}`)}\n          />\n        );\n      })}\n      {circleNodes.map(({ x, y, width }, index) => {\n        return (\n          <Circle\n            key={index}\n            x={x}\n            y={y}\n            radius={width / 2}\n            style={{ fill: 'purple', cursor: 'pointer' }}\n            onClick={() => alert(`clicked node #${index + 5}`)}\n          />\n        );\n      })}\n    </Svg>\n  );\n};\n\nexport default DagNodes;\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../helpers/Svg';\n\nPath.macro('squareTest', function (size, x, y) {\n  if (x && y) {\n    this.M(x, y); // only move if x & y are defined\n  }\n  this.right(size).down(size).left(size).up(size);\n  return this;\n});\n\nPath.macro('circleTest', function (radius, x, y) {\n  if (x && y) {\n    this.M(x, y); // only move if x & y are defined\n  }\n  this.m(-radius, 0)\n    .a(radius, radius, 0, 1, 0, -(radius * 2), 0)\n    .a(radius, radius, 0, 1, 0, radius * 2, 0);\n  return this;\n});\n\nPath.macro('triangleTest', function (w, h, x, y) {\n    this.M(x, y) // only move if x & y are defined\n    .l(-w / 2, h)\n    .right(w)\n    .L(x, y);\n  return this;\n});\n\nconst Macros = () => {\n  const macros = () => {\n    const p = new Path();\n    p.squareTest(30, 25, 25)\n      .squareTest(50, 60, 15)\n      .circleTest(15, 160, 40)\n      .circleTest(25, 225, 40)\n      .triangleTest(25, 25, 220, 30)\n      .triangleTest(65, 50, 265, 15)\n      .triangleTest(25, 25, 310, 30);\n    return p.toString();\n  };\n\n  return (\n    <Svg width={760} height={100}>\n      <path\n        d={macros()}\n        strokeWidth={1}\n        stroke='#222'\n      />\n    </Svg>\n  );\n};\n\nexport default Macros;\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nexport const Rect = () => (\n  <>\n    <h3 className='ui-header'>.rect(width, height, cx, cy)</h3>\n    <p>\n      .rect is drawn from center point (cx & cy). The cursor is then moved to\n      the center point.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().rect(120, 60, 60, 60).toString()} />\n      <path d={new Path().rect(10, 5, 60, 60).toString()} className='filled' />\n    </Svg>\n  </>\n);\n\nRect.displayName = 'Rect'\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nexport const Square = () => (\n  <>\n    <h3 className='ui-header'>.square(size, cx, cy)</h3>\n    <p>\n      .square is drawn from center point (cx & cy). The cursor is then moved to\n      the center point.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().square(100, 50, 50).toString()} />\n      <path d={new Path().square(10, 50, 50).toString()} className='filled' />\n    </Svg>\n  </>\n);\n\nSquare.displayName = 'Square'\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nexport const Triangle = () => (\n  <>\n    <h3 className='ui-header'>.triangle(size, cx, cy)</h3>\n    <p>\n      .triangle draws an equilateral triangle from center point (cx & cy). The\n      cursor is then moved to the center point.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().triangle(95, 50, 60).toString()} />\n      <path d={new Path().triangle(10, 50, 60).toString()} className='filled' />\n    </Svg>\n  </>\n);\n\nTriangle.displayName = 'Triangle'\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nexport const Circle = () => (\n  <>\n    <h3 className='ui-header'>.circle(size, cx, cy)</h3>\n    <p>\n      .circle is drawn from center points (cx & cy). The cursor is then moved to\n      the center points.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().circle(95, 50, 50).toString()} />\n      <path d={new Path().circle(10, 50, 50).toString()} className='filled' />\n    </Svg>\n  </>\n);\n\nCircle.displayName = 'Circle'\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nexport const Ellipse = () => (\n  <>\n    <h3 className='ui-header'>.ellipse(width, height, cx, cy)</h3>\n    <p>\n      .ellipse is drawn from center point (cx & cy). The cursor is then moved to\n      the center point.\n    </p>\n    <Svg width={155} height={120}>\n      <path d={new Path().ellipse(150, 75, 80, 50).toString()} />\n      <path\n        d={new Path().ellipse(15, 7.5, 80, 50).toString()}\n        className='filled'\n      />\n    </Svg>\n  </>\n);\n\nEllipse.displayName = 'Ellipse'\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nexport const Segment = () => (\n  <>\n    <h3 className='ui-header'>\n      .segment(cx, cy, radius, startAngle, endAngle)\n    </h3>\n    <p>\n      .segment is drawn from center point (cx & cy). The cursor is then moved to\n      the center point.\n    </p>\n\n    <Svg width={140} height={120}>\n      <path d={new Path().segment(60, 60, 50, 0, 270).toString()} />\n      <path d={new Path().circle(10, 60, 60).toString()} className='filled' />\n    </Svg>\n  </>\n);\n\nSegment.displayName = 'Segment'\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nexport const Sector = () => (\n  <>\n    <h3 className='ui-header'>.sector(cx, cy, radius, startAngle, endAngle)</h3>\n    <p>\n      .sector is drawn from center point (cx & cy). The cursor is then moved to\n      the center point.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().sector(60, 60, 50, 0, 270).toString()} />\n      <path d={new Path().circle(10, 60, 60).toString()} className='filled' />\n    </Svg>\n  </>\n);\n\nSector.displayName = 'Sector'\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nconst points = [\n  [10, 60],\n  [40, 0],\n  [70, 60],\n  [40, 120]\n];\n\nexport const Polygon = () => (\n  <>\n    <h3 className='ui-header'>.polygon([points])</h3>\n    <p>\n      .polygon accepts an array of [x, y] coordinates and then draws lines\n      connecting those points. The path will start from the first point and end\n      on the first point - closing the shape.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().polygon(points).toString()} />\n    </Svg>\n  </>\n);\n\nPolygon.displayName = 'Polygon'\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nexport const RegPolygon = () => (\n  <>\n    <h3 className='ui-header'>.regPolygon(size, sides, cx, cy)</h3>\n    <p>\n      .regPolygon is drawn from center point (cx & cy). The cursor is then moved\n      to the center point.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().regPolygon(100, 6, 50, 50).toString()} />\n      <path\n        d={new Path().regPolygon(10, 6, 50, 50).toString()}\n        className='filled'\n      />\n    </Svg>\n  </>\n);\n\nRegPolygon.displayName = 'RegPolygon'\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nconst pointsAbsolute = [\n  [10, 60],\n  [40, 0],\n  [70, 60],\n  [40, 120]\n];\n\nconst pointsRelative = [\n  [10, 60],\n  [30, -60],\n  [30, 60],\n  [-30, 60]\n];\nexport const Polyline = () => (\n  <>\n    <h3 className='ui-header'>.polyline([points], relative = false)</h3>\n    <p>\n      .polyline accepts an array of [x, y] coordinates and then draws lines\n      connecting those points. The path will start from the first point and end\n      on the last. points can be absolute or relative.\n    </p>\n    <h4 className='ui-header'>absolute</h4>\n    <Svg width={260} height={160}>\n      <path d={new Path().polyline(pointsAbsolute).toString()} />\n    </Svg>\n    <h4 className='ui-header'>relative</h4>\n    <Svg width={260} height={160}>\n      <path d={new Path().polyline(pointsRelative, true).toString()} />\n    </Svg>\n  </>\n);\n\nPolyline.displayName = 'Polyline'\n","import React from 'react';\nimport Path from 'react-svg-path';\n\nconst Pie = ({ size, cx, cy, data }) => {\n  const percentToDegree = (p) => (p / 100) * 360;\n  const sectors = [];\n  let total = 0;\n  data.forEach((d, i) => {\n    const startAngle = percentToDegree(total);\n    const endAngle = percentToDegree(total + d.percent);\n    const p = new Path();\n    p.sector(cx, cy, size / 2, startAngle, endAngle);\n    sectors.push(p.toComponent({ key: i, fill: d.color }));\n    total = total + d.percent;\n  });\n\n  return (\n      <g>{sectors}</g>\n  );\n};\n\nexport default Pie;\n","import React from 'react';\nimport Path from 'react-svg-path';\n\nconst Donut = ({ size, width, cx, cy, data, ...rest }) => {\n  const percentToDegree = (p) => (p / 100) * 360;\n  const segments = [];\n  let total = 0;\n  data.forEach((d, i) => {\n    const startAngle = percentToDegree(total);\n    const endAngle = percentToDegree(total + d.percent);\n    const p = new Path();\n    p.segment(cx, cy, (size - width) / 2, startAngle, endAngle);\n    segments.push(\n      p.toComponent({\n        key: i,\n        strokeWidth: width,\n        stroke: d.color,\n        fill: 'none'\n      })\n    );\n    total = total + d.percent;\n  });\n\n  return <g>{segments}</g>;\n};\n\nexport default Donut;\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nconst Grid = ({ x, y, width, height, cols, rows, close = true }) => {\n  const lines = new Path().M(x, y);\n  const extra = close ? 1 : 0;\n  const colWidth = width / cols;\n  const rowHeight = height / rows;\n  Array.from({ length: cols + extra }).map((_, index) =>\n    lines.M(x + index * colWidth, y).down(height)\n  );\n  Array.from({ length: rows + extra }).map((_, index) =>\n    lines.M(x, y + index * rowHeight, y).right(width)\n  );\n  return <path d={lines.toString()} stroke='#ddd' />;\n};\n\nconst SparkLine = ({ width, height, data }) => {\n  const sparkline = new Path();\n  const zero = height / 2;\n  const pointDistance = parseInt(width / data.length);\n  const points = data.map((d, index) => {\n    if (index !== 0) {\n      const prev = data[index - 1];\n      return [pointDistance, prev - d];\n    } else {\n      return [pointDistance, d];\n    }\n  });\n  points.unshift([0, zero + data.reduce((a, b) => a + b) / 2 - 10]);\n  sparkline.polyline(points, true);\n\n  return (\n    <Svg width={width + 1} height={height + 1}>\n      <Grid x={0} y={0} width={width} height={height} rows={10} cols={20} />\n      <path d={sparkline.toString()} stroke='red' fill='none' />\n      <path\n        d={new Path().rect(width, height, width / 2, height / 2)}\n        fill='none'\n        stroke='#333'\n      />\n    </Svg>\n  );\n};\n\nexport default SparkLine;\n","import React from \"react\";\nimport DagSinglePath from \"./components/demos/dag/DagSinglePath\";\nimport DagTwoPaths from \"./components/demos/dag/DagTwoPaths\";\nimport DagNodes from \"./components/demos/dag/DagNodes\";\nimport Macros from \"./components/demos/Macros\";\n\nimport {\n  Rect,\n  Square,\n  Circle,\n  Ellipse,\n  Segment,\n  Sector,\n  Polygon,\n  RegPolygon,\n  Triangle,\n  Polyline,\n} from \"./components/demos/basic\";\nimport Svg from \"./components/helpers/Svg\";\nimport Pie from \"./components/demos/complex/Pie\";\nimport Donut from \"./components/demos/complex/Donut\";\nimport SparkLine from \"./components/demos/complex/SparkLine\";\n\nimport \"./App.css\";\nconst App = () => {\n  const basicDemos = [\n    Rect,\n    Square,\n    Triangle,\n    RegPolygon,\n    Ellipse,\n    Circle,\n    Sector,\n    Segment,\n    Polyline,\n    Polygon,\n  ];\n\n  const pieData = [\n    {\n      color: \"#086972\",\n      percent: 20,\n      nested: [\n        { color: \"rgba(0,100,25,0.9)\", percent: 10 },\n        { color: \"rgba(0,100,25,0.8)\", percent: 10 },\n      ],\n    },\n    {\n      color: \"#01a9b4\",\n      percent: 30,\n      nested: [\n        { color: \"rgba(0,100,25,0.7)\", percent: 10 },\n        { color: \"rgba(0,100,25,0.6)\", percent: 10 },\n        { color: \"rgba(0,100,25,0.5)\", percent: 10 },\n      ],\n    },\n    {\n      color: \"#87dfd6\",\n      percent: 50,\n      nested: [\n        { color: \"rgba(0,100,25,0.4)\", percent: 25 },\n        { color: \"rgba(0,100,25,0.3)\", percent: 25 },\n      ],\n    },\n  ];\n  return (\n    <>\n      <h2>react-svg-path</h2>\n      <hr />\n      <a href=\"https://github.com/joemaddalone/react-svg-path\">\n        https://github.com/joemaddalone/react-svg-path\n      </a>\n\n      <h3 className=\"ui-header\">Demos</h3>\n      <p>\n        The svg element below contains only a single path. This may not be\n        ideal, depending on your needs, but it demonstrates the ability to\n        create complex shapes in a single path with react-svg-path\n      </p>\n      <div className=\"dag\">\n        <div style={{ margin: 20 }}>\n          <DagSinglePath />\n          <a\n            href=\"https://github.com/joemaddalone/react-svg-path/blob/master/example/src/components/demos/dag/DagSinglePath.js\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            source\n          </a>\n        </div>\n        <p>\n          We can easily convert this to two paths. One for the nodes and one for\n          the connecting lines.\n        </p>\n        <div style={{ margin: 20 }}>\n          <DagTwoPaths />\n          <a\n            href=\"https://github.com/joemaddalone/react-svg-path/blob/master/example/src/components/demos/dag/DagTwoPaths.js\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            source\n          </a>\n        </div>\n        <p>\n          Likewise we can use .toComponent() to create reusable components for\n          each node. Each of these nodes is clickable.\n        </p>\n        <div style={{ margin: 20 }}>\n          <DagNodes />\n          <a\n            href=\"https://github.com/joemaddalone/react-svg-path/blob/master/example/src/components/demos/dag/DagNodes.js\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            source\n          </a>\n        </div>\n      </div>\n\n      <p>Macros are a way to save a common set of path steps for reuse.</p>\n      <div style={{ margin: 20 }}>\n        <Macros />\n        <a\n          href=\"https://github.com/joemaddalone/react-svg-path/blob/master/example/src/components/demos/Macros.js\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </div>\n      <p>Macros are so nice we included a bunch for you.</p>\n      <div className=\"basic-shapes\">\n        <h2 className=\"ui-header\">Basic Shapes</h2>\n        {basicDemos.map((C, i) => (\n          <span key={i}>\n            <C />\n            <a\n              href={`https://github.com/joemaddalone/react-svg-path/blob/master/example/src/components/demos/basic/${C.displayName}.js`}\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              source\n            </a>\n          </span>\n        ))}\n      </div>\n\n      <h2 className=\"ui-header\">Combining Shapes</h2>\n      <div className=\"complex\">\n        <h3 className=\"ui-header\">multiple .sectors</h3>\n        <Svg width={250} height={160}>\n          <Pie size={150} cx={80} cy={80} data={pieData} />\n        </Svg>\n        <a\n          href={`https://github.com/joemaddalone/react-svg-path/blob/master/example/src/components/demos/complex/Pie.js`}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n        <h3 className=\"ui-header\">multiple .segments</h3>\n        <Svg width={250} height={160}>\n          <Donut width={25} size={150} cx={80} cy={80} data={pieData} />\n        </Svg>\n        <a\n          href={`https://github.com/joemaddalone/react-svg-path/blob/master/example/src/components/demos/complex/Donut.js`}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n        <h3 className=\"ui-header\">multiple .sectors + .segments</h3>\n        <Svg width={180} height={180}>\n          <Pie size={130} cx={90} cy={90} data={pieData} />\n          <Donut\n            width={20}\n            size={175}\n            cx={90}\n            cy={90}\n            stroke=\"#fff\"\n            data={pieData.map((pd) => pd.nested).flat()}\n          />\n        </Svg>\n        <h3 className=\"ui-header\">fitted .polyline</h3>\n        <SparkLine\n          width={300}\n          height={150}\n          data={[-10, -45, 10, 0, 35, 10, -9, 25, 15, 75]}\n        />\n        <a\n          href={`https://github.com/joemaddalone/react-svg-path/blob/master/example/src/components/demos/complex/SparkLine.js`}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}