{"version":3,"sources":["../../src/index.js","components/demos/dag/dagSetup.js","components/helpers/Svg.js","components/demos/dag/DagSinglePath.js","components/demos/dag/DagTwoPaths.js","components/demos/dag/DagNodes.js","components/demos/Macros.js","components/demos/basic/Rect.js","components/demos/basic/Square.js","components/demos/basic/Triangle.js","components/demos/basic/Circle.js","components/demos/basic/Ellipse.js","components/demos/basic/Segment.js","components/demos/basic/Sector.js","components/demos/basic/Polygon.js","components/demos/basic/RegPolygon.js","components/demos/basic/Polyline.js","components/demos/complex/Pie.js","components/demos/complex/Donut.js","components/demos/complex/SparkLine.js","App.js","index.js"],"names":["Path","toComponent","props","d","this","toString","strokeWidth","attr","Original","setupDag","g","dagre","graphlib","Graph","setGraph","rankdir","marginx","marginy","nodesep","ranksep","edgesep","setDefaultEdgeLabel","items","split","forEach","item","setNode","width","height","index","arr","setEdge","layout","nodes","map","node","edges","edge","graph","Svg","children","xmlns","viewBox","dag","dagSetup","DagSinglePath","stroke","p","points","m","x","y","shift","M","point","L","right","down","left","up","createPath","createConnectors","createNodes","Square","size","rest","moveTo","close","Circle","radius","fill","a","style","DagNodes","squareNodes","slice","circleNodes","key","cursor","onClick","alert","macro","w","h","l","Macros","squareTest","circleTest","triangleTest","macros","Rect","className","rect","displayName","square","Triangle","triangle","circle","Ellipse","ellipse","Segment","segment","Sector","sector","Polygon","polygon","RegPolygon","regPolygon","pointsAbsolute","pointsRelative","Polyline","polyline","Pie","cx","cy","data","percentToDegree","sectors","total","i","startAngle","endAngle","percent","push","color","Donut","segments","Grid","cols","rows","lines","extra","colWidth","rowHeight","Array","from","length","_","SparkLine","sparkline","zero","pointDistance","parseInt","prev","unshift","reduce","b","App","basicDemos","pieData","nested","href","margin","rel","target","DagTwoPaths","C","pd","flat","ReactDOM","render","document","getElementById"],"mappings":"+cAGMA,Y,4KACJC,wBACE,YADsB,IAAZC,MAAQ,IACX,4BAAMC,EAAGC,KAAKC,YAAgBD,KAA9B,WAAP,K,EAGFE,wBACE,OAAOF,KAAKG,KAAK,cAAjB,I,EANEP,C,OAAaQ,G,iBC0CJC,EA3CE,WACf,IAAIC,EAAI,IAAIC,IAAMC,SAASC,MAC3BH,EAAEI,SAAS,CACTC,QAAS,KACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,QAAS,IAGXV,EAAEW,qBAAoB,WACpB,MAAO,MAGT,IAAMC,EAAQ,6BAA6BC,MAAM,IAqBjD,OApBAD,EAAME,SAAQ,SAACC,GAAD,OAAUf,EAAEgB,QAAQD,EAAM,CAAEE,MAAO,GAAIC,OAAQ,QAC7DN,EAAME,SAAQ,SAACC,EAAMI,EAAOC,GACZ,IAAVD,IAGAA,EAAQ,EACVnB,EAAEqB,QAAQN,EAAM,KACPI,EAAQ,EACjBnB,EAAEqB,QAAQN,EAAM,KACPI,EAAQ,GACjBnB,EAAEqB,QAAQN,EAAM,KACPI,EAAQ,GACjBnB,EAAEqB,QAAQN,EAAM,KAEhBf,EAAEqB,QAAQN,EAAM,SAIpBd,IAAMqB,OAAOtB,GAEN,CACLuB,MAAOvB,EAAEuB,QAAQC,KAAI,SAACC,GAAD,OAAUzB,EAAEyB,KAAKA,MACtCC,MAAO1B,EAAE0B,QAAQF,KAAI,SAACG,GAAD,OAAU3B,EAAE2B,KAAKA,MACtCC,MAAO5B,EAAE4B,UC1BEC,EAbH,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUb,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAC9B,OACE,yBACEa,MAAM,6BACNd,MAAOA,EACPC,OAAQA,EACRc,QAAO,cAASf,EAAT,YAAkBC,IAExBY,EANH,MCCEG,EAAMC,IA6BGC,EA3BO,WAoBpB,OACE,kBAAC,EAAD,CAAKlB,MAAOgB,EAAIL,MAAMX,MAAOC,OAAQe,EAAIL,MAAMV,QAC7C,0BAAMkB,OAAO,OAAOxC,YAAa,GAAKH,EArBvB,WAAO,IAChBiC,EAAiBO,EAAjBP,MAAOH,EAAUU,EAAVV,MACTc,EAAI,IAAI/C,EAcd,OAbAoC,EAAMZ,SAAQ,YAAuB,IAApBwB,EAAmB,EAAnBA,OACTC,GAD4B,EAAXC,EAAW,EAARC,EAChBH,EAAOI,SACjBL,EAAEM,EAAEJ,EAAEC,EAAGD,EAAEE,GACXH,EAAOxB,SAAQ,SAAC8B,GAAD,OAAWP,EAAEQ,EAAED,EAAMJ,EAAGI,EAAMH,SAE/ClB,EAAMT,SAAQ,YAA8B,IAA3BG,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,OAAQsB,EAAW,EAAXA,EAAGC,EAAQ,EAARA,EACjCJ,EAAEM,EAAEH,EAAIvB,EAAQ,EAAGwB,EAAIvB,EAAS,GAC7B4B,MAAM7B,GACN8B,KAAK7B,GACL8B,KAAK/B,GACLgC,GAAG/B,MAGDmB,EAAE1C,WAKkCuD,OCxBzCjB,EAAMC,IAqCGC,EAnCO,WA2BpB,OACE,kBAAC,EAAD,CAAKlB,MAAOgB,EAAIL,MAAMX,MAAOC,OAAQe,EAAIL,MAAMV,QAC7C,0BAAMkB,OAAO,OAAOxC,YAAa,EAAGH,EAdf,WAAO,IACtBiC,EAAUO,EAAVP,MACFW,EAAI,IAAI/C,EAOd,OANAoC,EAAMZ,SAAQ,YAAuB,IAApBwB,EAAmB,EAAnBA,OACTC,GAD4B,EAAXC,EAAW,EAARC,EAChBH,EAAOI,SACjBL,EAAEM,EAAEJ,EAAEC,EAAGD,EAAEE,GACXH,EAAOxB,SAAQ,SAAC8B,GAAD,OAAWP,EAAEQ,EAAED,EAAMJ,EAAGI,EAAMH,SAGxCJ,EAAE1C,WAKgCwD,KACvC,0BAAMf,OAAO,MAAMxC,YAAa,EAAGH,EA7BnB,WAAO,IACjB8B,EAAUU,EAAVV,MACFc,EAAI,IAAI/C,EASd,OARAiC,EAAMT,SAAQ,YAA8B,IAA3BG,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,OAAQsB,EAAW,EAAXA,EAAGC,EAAQ,EAARA,EACjCJ,EAAEM,EAAEH,EAAIvB,EAAQ,EAAGwB,EAAIvB,EAAS,GAC7B4B,MAAM7B,GACN8B,KAAK7B,GACL8B,KAAK/B,GACLgC,GAAG/B,MAGDmB,EAAE1C,WAkB+ByD,O,QChCtCnB,EAAMC,IAENmB,EAAS,SAAC,GAA6B,IAA3Bb,EAA0B,EAA1BA,EAAGC,EAAuB,EAAvBA,EAAGa,EAAoB,EAApBA,KAASC,EAAW,gCAO1C,OANa,IAAIjE,GACdkE,OAAOhB,EAAGC,GACVK,MAAMQ,GACNP,KAAKO,GACLN,KAAKM,GACLG,QACSlE,YAAYgE,IAGpBG,EAAS,SAAC,GAAqC,IAAnClB,EAAkC,EAAlCA,EAAGC,EAA+B,EAA/BA,EAAGkB,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,KAASL,EAAW,yCAOlD,OANa,IAAIjE,GACdqD,EAAEH,EAAGC,GACLF,GAAGoB,EAAQ,GACXE,EAAEF,EAAQA,EAAQ,EAAG,EAAG,EAAY,EAATA,EAAY,GACvCE,EAAEF,EAAQA,EAAQ,EAAG,EAAG,GAAc,EAATA,EAAa,GAC1CG,MAAM,CAAEF,SACCrE,YAAYgE,IAkDXQ,EA/CE,WACf,IAYMC,EAAc/B,EAAIV,MAAM0C,MAAM,EAAG,GACjCC,EAAcjC,EAAIV,MAAM0C,MAAM,GAEpC,OACE,kBAAC,EAAD,CAAKhD,MAAOgB,EAAIL,MAAMX,MAAOC,OAAQe,EAAIL,MAAMV,QAC7C,0BAAMkB,OAAO,OAAOxC,YAAa,EAAGH,EAjBf,WAAO,IACtBiC,EAAUO,EAAVP,MACFW,EAAI,IAAI/C,EAOd,OANAoC,EAAMZ,SAAQ,YAAuB,IAApBwB,EAAmB,EAAnBA,OACTC,GAD4B,EAAXC,EAAW,EAARC,EAChBH,EAAOI,SACjBL,EAAEM,EAAEJ,EAAEC,EAAGD,EAAEE,GACXH,EAAOxB,SAAQ,SAAC8B,GAAD,OAAWP,EAAEQ,EAAED,EAAMJ,EAAGI,EAAMH,SAGxCJ,EAAE1C,WAQgCwD,KACtCa,EAAYxC,KAAI,WAAkBL,GAAW,IAA1BqB,EAAyB,EAAzBA,EAAGC,EAAsB,EAAtBA,EAAGxB,EAAmB,EAAnBA,MACxB,OACE,kBAAC,EAAD,CACEkD,IAAKhD,EACLqB,EAAGA,EAAIvB,EAAQ,EACfwB,EAAGA,EAAIxB,EAAQ,EACfqC,KAAMrC,EACN6C,MAAO,CAAEF,KAAM,gBAAiBQ,OAAQ,WACxCC,QAAS,kBAAMC,MAAM,iBAAD,OAAkBnD,UAI3C+C,EAAY1C,KAAI,WAAkBL,GAAW,IAA1BqB,EAAyB,EAAzBA,EAAGC,EAAsB,EAAtBA,EAAGxB,EAAmB,EAAnBA,MACxB,OACE,kBAAC,EAAD,CACEkD,IAAKhD,EACLqB,EAAGA,EACHC,EAAGA,EACHkB,OAAQ1C,EAAQ,EAChB6C,MAAO,CAAEF,KAAM,SAAUQ,OAAQ,WACjCC,QAAS,kBAAMC,MAAM,iBAAD,OAAkBnD,EAAQ,YC9D1D7B,EAAKiF,MAAM,cAAc,SAAUjB,EAAMd,EAAGC,GAK1C,OAJID,GAAKC,GACP/C,KAAKiD,EAAEH,EAAGC,GAEZ/C,KAAKoD,MAAMQ,GAAMP,KAAKO,GAAMN,KAAKM,GAAML,GAAGK,GACnC5D,QAGTJ,EAAKiF,MAAM,cAAc,SAAUZ,EAAQnB,EAAGC,GAO5C,OANID,GAAKC,GACP/C,KAAKiD,EAAEH,EAAGC,GAEZ/C,KAAK6C,GAAGoB,EAAQ,GACbE,EAAEF,EAAQA,EAAQ,EAAG,EAAG,GAAc,EAATA,EAAa,GAC1CE,EAAEF,EAAQA,EAAQ,EAAG,EAAG,EAAY,EAATA,EAAY,GACnCjE,QAGTJ,EAAKiF,MAAM,gBAAgB,SAAUC,EAAGC,EAAGjC,EAAGC,GAK5C,OAJE/C,KAAKiD,EAAEH,EAAGC,GACTiC,GAAGF,EAAI,EAAGC,GACV3B,MAAM0B,GACN3B,EAAEL,EAAGC,GACD/C,QAGT,IAwBeiF,EAxBA,WAab,OACE,kBAAC,EAAD,CAAK1D,MAAO,IAAKC,OAAQ,KACvB,0BACEzB,EAfS,WACb,IAAM4C,EAAI,IAAI/C,EAQd,OAPA+C,EAAEuC,WAAW,GAAI,GAAI,IAClBA,WAAW,GAAI,GAAI,IACnBC,WAAW,GAAI,IAAK,IACpBA,WAAW,GAAI,IAAK,IACpBC,aAAa,GAAI,GAAI,IAAK,IAC1BA,aAAa,GAAI,GAAI,IAAK,IAC1BA,aAAa,GAAI,GAAI,IAAK,IACtBzC,EAAE1C,WAMFoF,GACHnF,YAAa,EACbwC,OAAO,WC5CF4C,EAAO,kBAClB,oCACE,wBAAIC,UAAU,aAAd,gCACA,wHAIA,kBAAC,EAAD,CAAKhE,MAAO,IAAKC,OAAQ,KACvB,0BAAMzB,GAAG,IAAIH,GAAO4F,KAAK,IAAK,GAAI,GAAI,IAAIvF,aAC1C,0BAAMF,GAAG,IAAIH,GAAO4F,KAAK,GAAI,EAAG,GAAI,IAAIvF,WAAYsF,UAAU,cAKpED,EAAKG,YAAc,OCdZ,IAAM9B,EAAS,kBACpB,oCACE,wBAAI4B,UAAU,aAAd,yBACA,0HAIA,kBAAC,EAAD,CAAKhE,MAAO,IAAKC,OAAQ,KACvB,0BAAMzB,GAAG,IAAIH,GAAO8F,OAAO,IAAK,GAAI,IAAIzF,aACxC,0BAAMF,GAAG,IAAIH,GAAO8F,OAAO,GAAI,GAAI,IAAIzF,WAAYsF,UAAU,cAKnE5B,EAAO8B,YAAc,SCdd,IAAME,EAAW,kBACtB,oCACE,wBAAIJ,UAAU,aAAd,2BACA,iJAIA,kBAAC,EAAD,CAAKhE,MAAO,IAAKC,OAAQ,KACvB,0BAAMzB,GAAG,IAAIH,GAAOgG,SAAS,GAAI,GAAI,IAAI3F,aACzC,0BAAMF,GAAG,IAAIH,GAAOgG,SAAS,GAAI,GAAI,IAAI3F,WAAYsF,UAAU,cAKrEI,EAASF,YAAc,WCdhB,IAAMzB,EAAS,kBACpB,oCACE,wBAAIuB,UAAU,aAAd,yBACA,4HAIA,kBAAC,EAAD,CAAKhE,MAAO,IAAKC,OAAQ,KACvB,0BAAMzB,GAAG,IAAIH,GAAOiG,OAAO,GAAI,GAAI,IAAI5F,aACvC,0BAAMF,GAAG,IAAIH,GAAOiG,OAAO,GAAI,GAAI,IAAI5F,WAAYsF,UAAU,cAKnEvB,EAAOyB,YAAc,SCdd,IAAMK,EAAU,kBACrB,oCACE,wBAAIP,UAAU,aAAd,mCACA,2HAIA,kBAAC,EAAD,CAAKhE,MAAO,IAAKC,OAAQ,KACvB,0BAAMzB,GAAG,IAAIH,GAAOmG,QAAQ,IAAK,GAAI,GAAI,IAAI9F,aAC7C,0BACEF,GAAG,IAAIH,GAAOmG,QAAQ,GAAI,IAAK,GAAI,IAAI9F,WACvCsF,UAAU,cAMlBO,EAAQL,YAAc,UCjBf,IAAMO,EAAU,kBACrB,oCACE,wBAAIT,UAAU,aAAd,kDAGA,2HAKA,kBAAC,EAAD,CAAKhE,MAAO,IAAKC,OAAQ,KACvB,0BAAMzB,GAAG,IAAIH,GAAOqG,QAAQ,GAAI,GAAI,GAAI,EAAG,KAAKhG,aAChD,0BAAMF,GAAG,IAAIH,GAAOiG,OAAO,GAAI,GAAI,IAAI5F,WAAYsF,UAAU,cAKnES,EAAQP,YAAc,UCjBf,IAAMS,EAAS,kBACpB,oCACE,wBAAIX,UAAU,aAAd,iDACA,0HAIA,kBAAC,EAAD,CAAKhE,MAAO,IAAKC,OAAQ,KACvB,0BAAMzB,GAAG,IAAIH,GAAOuG,OAAO,GAAI,GAAI,GAAI,EAAG,KAAKlG,aAC/C,0BAAMF,GAAG,IAAIH,GAAOiG,OAAO,GAAI,GAAI,IAAI5F,WAAYsF,UAAU,cAKnEW,EAAOT,YAAc,SCdrB,IAAM7C,EAAS,CACb,CAAC,GAAI,IACL,CAAC,GAAI,GACL,CAAC,GAAI,IACL,CAAC,GAAI,MAGMwD,EAAU,kBACrB,oCACE,wBAAIb,UAAU,aAAd,sBACA,qNAKA,kBAAC,EAAD,CAAKhE,MAAO,IAAKC,OAAQ,KACvB,0BAAMzB,GAAG,IAAIH,GAAOyG,QAAQzD,GAAQ3C,gBAK1CmG,EAAQX,YAAc,UCrBf,IAAMa,EAAa,kBACxB,oCACE,wBAAIf,UAAU,aAAd,oCACA,8HAIA,kBAAC,EAAD,CAAKhE,MAAO,IAAKC,OAAQ,KACvB,0BAAMzB,GAAG,IAAIH,GAAO2G,WAAW,IAAK,EAAG,GAAI,IAAItG,aAC/C,0BACEF,GAAG,IAAIH,GAAO2G,WAAW,GAAI,EAAG,GAAI,IAAItG,WACxCsF,UAAU,cAMlBe,EAAWb,YAAc,aCjBzB,IAAMe,EAAiB,CACrB,CAAC,GAAI,IACL,CAAC,GAAI,GACL,CAAC,GAAI,IACL,CAAC,GAAI,MAGDC,EAAiB,CACrB,CAAC,GAAI,IACL,CAAC,IAAK,IACN,CAAC,GAAI,IACL,EAAE,GAAI,KAEKC,EAAW,kBACtB,oCACE,wBAAInB,UAAU,aAAd,yCACA,+NAKA,wBAAIA,UAAU,aAAd,YACA,kBAAC,EAAD,CAAKhE,MAAO,IAAKC,OAAQ,KACvB,0BAAMzB,GAAG,IAAIH,GAAO+G,SAASH,GAAgBvG,cAE/C,wBAAIsF,UAAU,aAAd,YACA,kBAAC,EAAD,CAAKhE,MAAO,IAAKC,OAAQ,KACvB,0BAAMzB,GAAG,IAAIH,GAAO+G,SAASF,GAAgB,GAAMxG,gBAKzDyG,EAASjB,YAAc,WCjCvB,IAkBemB,EAlBH,SAAC,GAA4B,IAA1BhD,EAAyB,EAAzBA,KAAMiD,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACrBC,EAAkB,SAACrE,GAAD,OAAQA,EAAI,IAAO,KACrCsE,EAAU,GACZC,EAAQ,EAUZ,OATAH,EAAK3F,SAAQ,SAACrB,EAAGoH,GACf,IAAMC,EAAaJ,EAAgBE,GAC7BG,EAAWL,EAAgBE,EAAQnH,EAAEuH,SACrC3E,EAAI,IAAI/C,EACd+C,EAAEwD,OAAOU,EAAIC,EAAIlD,EAAO,EAAGwD,EAAYC,GACvCJ,EAAQM,KAAK5E,EAAE9C,YAAY,CAAE4E,IAAK0C,EAAGjD,KAAMnE,EAAEyH,SAC7CN,GAAgBnH,EAAEuH,WAIhB,2BAAIL,ICSKQ,EAvBD,SAAC,GAA4C,IAA1C7D,EAAyC,EAAzCA,KAAMrC,EAAmC,EAAnCA,MAAOsF,EAA4B,EAA5BA,GAAIC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,KAC9BC,GADkD,iDAChC,SAACrE,GAAD,OAAQA,EAAI,IAAO,MACrC+E,EAAW,GACbR,EAAQ,EAiBZ,OAhBAH,EAAK3F,SAAQ,SAACrB,EAAGoH,GACf,IAAMC,EAAaJ,EAAgBE,GAC7BG,EAAWL,EAAgBE,EAAQnH,EAAEuH,SACrC3E,EAAI,IAAI/C,EACd+C,EAAEsD,QAAQY,EAAIC,GAAKlD,EAAOrC,GAAS,EAAG6F,EAAYC,GAClDK,EAASH,KACP5E,EAAE9C,YAAY,CACZ4E,IAAK0C,EACLjH,YAAaqB,EACbmB,OAAQ3C,EAAEyH,MACVtD,KAAM,UAGVgD,GAAgBnH,EAAEuH,WAGb,2BAAII,ICnBPC,EAAO,SAAC,GAAuD,IAArD7E,EAAoD,EAApDA,EAAGC,EAAiD,EAAjDA,EAAGxB,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,OAAQoG,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAyB,IAAnB9D,aAAmB,SAC5D+D,GAAQ,IAAIlI,GAAOqD,EAAEH,EAAGC,GACxBgF,EAAQhE,EAAQ,EAAI,EACpBiE,EAAWzG,EAAQqG,EACnBK,EAAYzG,EAASqG,EAO3B,OANAK,MAAMC,KAAK,CAAEC,OAAQR,EAAOG,IAASjG,KAAI,SAACuG,EAAG5G,GAAJ,OACvCqG,EAAM7E,EAAEH,EAAIrB,EAAQuG,EAAUjF,GAAGM,KAAK7B,MAExC0G,MAAMC,KAAK,CAAEC,OAAQP,EAAOE,IAASjG,KAAI,SAACuG,EAAG5G,GAAJ,OACvCqG,EAAM7E,EAAEH,EAAGC,EAAItB,EAAQwG,EAAWlF,GAAGK,MAAM7B,MAEtC,0BAAMxB,EAAG+H,EAAM7H,WAAYyC,OAAO,UA+B5B4F,EA5BG,SAAC,GAA6B,IAA3B/G,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,OAAQuF,EAAW,EAAXA,KAC5BwB,EAAY,IAAI3I,EAChB4I,EAAOhH,EAAS,EAChBiH,EAAgBC,SAASnH,EAAQwF,EAAKqB,QACtCxF,EAASmE,EAAKjF,KAAI,SAAC/B,EAAG0B,GAC1B,GAAc,IAAVA,EAAa,CACf,IAAMkH,EAAO5B,EAAKtF,EAAQ,GAC1B,MAAO,CAACgH,EAAeE,EAAO5I,GAE9B,MAAO,CAAC0I,EAAe1I,MAM3B,OAHA6C,EAAOgG,QAAQ,CAAC,EAAGJ,EAAOzB,EAAK8B,QAAO,SAAC1E,EAAG2E,GAAJ,OAAU3E,EAAI2E,KAAK,EAAI,KAC7DP,EAAU5B,SAAS/D,GAAQ,GAGzB,kBAAC,EAAD,CAAKrB,MAAOA,EAAQ,EAAGC,OAAQA,EAAS,GACtC,kBAAC,EAAD,CAAMsB,EAAG,EAAGC,EAAG,EAAGxB,MAAOA,EAAOC,OAAQA,EAAQqG,KAAM,GAAID,KAAM,KAChE,0BAAM7H,EAAGwI,EAAUtI,WAAYyC,OAAO,MAAMwB,KAAK,SACjD,0BACEnE,GAAG,IAAIH,GAAO4F,KAAKjE,EAAOC,EAAQD,EAAQ,EAAGC,EAAS,GACtD0C,KAAK,OACLxB,OAAO,WCkKAqG,G,OAlLH,WACV,IAAMC,EAAa,CACjB1D,EACA3B,EACAgC,EACAW,EACAR,EACA9B,EACAkC,EACAF,EACAU,EACAN,GAGI6C,EAAU,CACd,CACEzB,MAAO,UACPF,QAAS,GACT4B,OAAQ,CACN,CAAE1B,MAAO,qBAAsBF,QAAS,IACxC,CAAEE,MAAO,qBAAsBF,QAAS,MAG5C,CACEE,MAAO,UACPF,QAAS,GACT4B,OAAQ,CACN,CAAE1B,MAAO,qBAAsBF,QAAS,IACxC,CAAEE,MAAO,qBAAsBF,QAAS,IACxC,CAAEE,MAAO,qBAAsBF,QAAS,MAG5C,CACEE,MAAO,UACPF,QAAS,GACT4B,OAAQ,CACN,CAAE1B,MAAO,qBAAsBF,QAAS,IACxC,CAAEE,MAAO,qBAAsBF,QAAS,OAI9C,OACE,oCACE,8CACA,6BACA,uBAAG6B,KAAK,kDAAR,kDAIA,wBAAI5D,UAAU,aAAd,SACA,+NAKA,yBAAKA,UAAU,OACb,yBAAKnB,MAAO,CAAEgF,OAAQ,KACpB,kBAAC,EAAD,MACA,uBACED,KAAK,2GACLE,IAAI,sBACJC,OAAO,UAHT,WAQF,2HAIA,yBAAKlF,MAAO,CAAEgF,OAAQ,KACpB,kBAACG,EAAD,MACA,uBACEJ,KAAK,yGACLE,IAAI,sBACJC,OAAO,UAHT,WAQF,gJAIA,yBAAKlF,MAAO,CAAEgF,OAAQ,KACpB,kBAAC,EAAD,MACA,uBACED,KAAK,sGACLE,IAAI,sBACJC,OAAO,UAHT,YAUJ,6FACA,yBAAKlF,MAAO,CAAEgF,OAAQ,KACpB,kBAAC,EAAD,MACA,uBACED,KAAK,oGACLE,IAAI,sBACJC,OAAO,UAHT,WAQF,8EACA,yBAAK/D,UAAU,gBACb,wBAAIA,UAAU,aAAd,gBACCyD,EAAWlH,KAAI,SAAC0H,EAAGrC,GAAJ,OACd,0BAAM1C,IAAK0C,GACT,kBAACqC,EAAD,MACA,uBACEL,KAAI,wGAAmGK,EAAE/D,YAArG,OACJ4D,IAAI,sBACJC,OAAO,UAHT,eAWN,wBAAI/D,UAAU,aAAd,oBACA,yBAAKA,UAAU,WACb,wBAAIA,UAAU,aAAd,qBACA,kBAAC,EAAD,CAAKhE,MAAO,IAAKC,OAAQ,KACvB,kBAAC,EAAD,CAAKoC,KAAM,IAAKiD,GAAI,GAAIC,GAAI,GAAIC,KAAMkC,KAExC,uBACEE,KAAI,yGACJE,IAAI,sBACJC,OAAO,UAHT,UAOA,wBAAI/D,UAAU,aAAd,sBACA,kBAAC,EAAD,CAAKhE,MAAO,IAAKC,OAAQ,KACvB,kBAAC,EAAD,CAAOD,MAAO,GAAIqC,KAAM,IAAKiD,GAAI,GAAIC,GAAI,GAAIC,KAAMkC,KAErD,uBACEE,KAAI,2GACJE,IAAI,sBACJC,OAAO,UAHT,UAOA,wBAAI/D,UAAU,aAAd,iCACA,kBAAC,EAAD,CAAKhE,MAAO,IAAKC,OAAQ,KACvB,kBAAC,EAAD,CAAKoC,KAAM,IAAKiD,GAAI,GAAIC,GAAI,GAAIC,KAAMkC,IACtC,kBAAC,EAAD,CACE1H,MAAO,GACPqC,KAAM,IACNiD,GAAI,GACJC,GAAI,GACJpE,OAAO,OACPqE,KAAMkC,EAAQnH,KAAI,SAAC2H,GAAD,OAAQA,EAAGP,UAAQQ,UAGzC,wBAAInE,UAAU,aAAd,oBACA,kBAAC,EAAD,CACEhE,MAAO,IACPC,OAAQ,IACRuF,KAAM,EAAE,IAAK,GAAI,GAAI,EAAG,GAAI,IAAK,EAAG,GAAI,GAAI,MAE9C,uBACEoC,KAAI,+GACJE,IAAI,sBACJC,OAAO,UAHT,cCzLRK,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.6cffc8af.chunk.js","sourcesContent":["import React from 'react';\nimport Original from '@joemaddalone/path';\n\nclass Path extends Original {\n  toComponent(props = {}) {\n    return <path d={this.toString()} {...this.attributes} {...props} />;\n  }\n\n  strokeWidth(val) {\n    return this.attr('strokeWidth', val);\n  }\n}\n\nexport default Path;\n","import dagre from 'dagre';\n\nconst setupDag = () => {\n  var g = new dagre.graphlib.Graph();\n  g.setGraph({\n    rankdir: 'BT',\n    marginx: 15,\n    marginy: 50,\n    nodesep: 10,\n    ranksep: 50,\n    edgesep: 5\n  });\n\n  g.setDefaultEdgeLabel(function () {\n    return {};\n  });\n\n  const items = 'abcdefghijklmnopqrstuvwxyz'.split('');\n  items.forEach((item) => g.setNode(item, { width: 25, height: 25 }));\n  items.forEach((item, index, arr) => {\n    if (index === 0) {\n      return;\n    }\n    if (index < 5) {\n      g.setEdge(item, 'a');\n    } else if (index < 9) {\n      g.setEdge(item, 'b');\n    } else if (index < 15) {\n      g.setEdge(item, 'c');\n    } else if (index < 19) {\n      g.setEdge(item, 'd');\n    } else {\n      g.setEdge(item, 'e');\n    }\n  });\n\n  dagre.layout(g);\n\n  return {\n    nodes: g.nodes().map((node) => g.node(node)),\n    edges: g.edges().map((edge) => g.edge(edge)),\n    graph: g.graph()\n  };\n};\n\nexport default setupDag;\n\n","import React from 'react';\n\nconst Svg = ({ children, width, height }) => {\n  return (\n    <svg\n      xmlns='http://www.w3.org/2000/svg'\n      width={width}\n      height={height}\n      viewBox={`0 0 ${width} ${height}`}\n    >\n      {children}/\n    </svg>\n  );\n};\n\nexport default Svg;\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport dagSetup from './dagSetup';\nimport Svg from '../../helpers/Svg';\n\nconst dag = dagSetup();\n\nconst DagSinglePath = () => {\n  const createPath = () => {\n    const { edges, nodes } = dag;\n    const p = new Path();\n    edges.forEach(({ points, x, y }) => {\n      const m = points.shift();\n      p.M(m.x, m.y);\n      points.forEach((point) => p.L(point.x, point.y));\n    });\n    nodes.forEach(({ width, height, x, y }) => {\n      p.M(x - width / 2, y - height / 2)\n        .right(width)\n        .down(height)\n        .left(width)\n        .up(height);\n    });\n\n    return p.toString();\n  };\n\n  return (\n    <Svg width={dag.graph.width} height={dag.graph.height}>\n      <path stroke='#222' strokeWidth={0.5} d={createPath()} />\n    </Svg>\n  );\n};\n\nexport default DagSinglePath;\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport dagSetup from './dagSetup';\nimport Svg from '../../helpers/Svg';\n\nconst dag = dagSetup();\n\nconst DagSinglePath = () => {\n  const createNodes = () => {\n    const { nodes } = dag;\n    const p = new Path();\n    nodes.forEach(({ width, height, x, y }) => {\n      p.M(x - width / 2, y - height / 2)\n        .right(width)\n        .down(height)\n        .left(width)\n        .up(height);\n    });\n\n    return p.toString();\n  };\n\n  const createConnectors = () => {\n    const { edges } = dag;\n    const p = new Path();\n    edges.forEach(({ points, x, y }) => {\n      const m = points.shift();\n      p.M(m.x, m.y);\n      points.forEach((point) => p.L(point.x, point.y));\n    });\n\n    return p.toString();\n  };\n\n  return (\n    <Svg width={dag.graph.width} height={dag.graph.height}>\n      <path stroke='#222' strokeWidth={1} d={createConnectors()} />\n      <path stroke='red' strokeWidth={1} d={createNodes()} />\n    </Svg>\n  );\n};\n\nexport default DagSinglePath;\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport dagSetup from './dagSetup';\nimport Svg from '../../helpers/Svg';\n\nconst dag = dagSetup();\n\nconst Square = ({ x, y, size, ...rest }) => {\n  const path = new Path()\n    .moveTo(x, y)\n    .right(size)\n    .down(size)\n    .left(size)\n    .close();\n  return path.toComponent(rest);\n};\n\nconst Circle = ({ x, y, radius, fill, ...rest }) => {\n  const path = new Path()\n    .M(x, y)\n    .m(-radius, 0)\n    .a(radius, radius, 0, 1, 0, radius * 2, 0)\n    .a(radius, radius, 0, 1, 0, -(radius * 2), 0)\n    .style({ fill });\n  return path.toComponent(rest);\n};\n\nconst DagNodes = () => {\n  const createConnectors = () => {\n    const { edges } = dag;\n    const p = new Path();\n    edges.forEach(({ points, x, y }) => {\n      const m = points.shift();\n      p.M(m.x, m.y);\n      points.forEach((point) => p.L(point.x, point.y));\n    });\n\n    return p.toString();\n  };\n\n  const squareNodes = dag.nodes.slice(0, 5);\n  const circleNodes = dag.nodes.slice(5);\n\n  return (\n    <Svg width={dag.graph.width} height={dag.graph.height}>\n      <path stroke='#222' strokeWidth={1} d={createConnectors()} />\n      {squareNodes.map(({ x, y, width }, index) => {\n        return (\n          <Square\n            key={index}\n            x={x - width / 2}\n            y={y - width / 2}\n            size={width}\n            style={{ fill: 'rebeccapurple', cursor: 'pointer' }}\n            onClick={() => alert(`clicked node #${index}`)}\n          />\n        );\n      })}\n      {circleNodes.map(({ x, y, width }, index) => {\n        return (\n          <Circle\n            key={index}\n            x={x}\n            y={y}\n            radius={width / 2}\n            style={{ fill: 'purple', cursor: 'pointer' }}\n            onClick={() => alert(`clicked node #${index + 5}`)}\n          />\n        );\n      })}\n    </Svg>\n  );\n};\n\nexport default DagNodes;\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../helpers/Svg';\n\nPath.macro('squareTest', function (size, x, y) {\n  if (x && y) {\n    this.M(x, y); // only move if x & y are defined\n  }\n  this.right(size).down(size).left(size).up(size);\n  return this;\n});\n\nPath.macro('circleTest', function (radius, x, y) {\n  if (x && y) {\n    this.M(x, y); // only move if x & y are defined\n  }\n  this.m(-radius, 0)\n    .a(radius, radius, 0, 1, 0, -(radius * 2), 0)\n    .a(radius, radius, 0, 1, 0, radius * 2, 0);\n  return this;\n});\n\nPath.macro('triangleTest', function (w, h, x, y) {\n    this.M(x, y) // only move if x & y are defined\n    .l(-w / 2, h)\n    .right(w)\n    .L(x, y);\n  return this;\n});\n\nconst Macros = () => {\n  const macros = () => {\n    const p = new Path();\n    p.squareTest(30, 25, 25)\n      .squareTest(50, 60, 15)\n      .circleTest(15, 160, 40)\n      .circleTest(25, 225, 40)\n      .triangleTest(25, 25, 220, 30)\n      .triangleTest(65, 50, 265, 15)\n      .triangleTest(25, 25, 310, 30);\n    return p.toString();\n  };\n\n  return (\n    <Svg width={760} height={100}>\n      <path\n        d={macros()}\n        strokeWidth={1}\n        stroke='#222'\n      />\n    </Svg>\n  );\n};\n\nexport default Macros;\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nexport const Rect = () => (\n  <>\n    <h3 className='ui-header'>.rect(width, height, cx, cy)</h3>\n    <p>\n      .rect is drawn from center point (cx & cy). The cursor is then moved to\n      the center point.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().rect(120, 60, 60, 60).toString()} />\n      <path d={new Path().rect(10, 5, 60, 60).toString()} className='filled' />\n    </Svg>\n  </>\n);\n\nRect.displayName = 'Rect'\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nexport const Square = () => (\n  <>\n    <h3 className='ui-header'>.square(size, cx, cy)</h3>\n    <p>\n      .square is drawn from center point (cx & cy). The cursor is then moved to\n      the center point.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().square(100, 50, 50).toString()} />\n      <path d={new Path().square(10, 50, 50).toString()} className='filled' />\n    </Svg>\n  </>\n);\n\nSquare.displayName = 'Square'\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nexport const Triangle = () => (\n  <>\n    <h3 className='ui-header'>.triangle(size, cx, cy)</h3>\n    <p>\n      .triangle draws an equilateral triangle from center point (cx & cy). The\n      cursor is then moved to the center point.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().triangle(95, 50, 60).toString()} />\n      <path d={new Path().triangle(10, 50, 60).toString()} className='filled' />\n    </Svg>\n  </>\n);\n\nTriangle.displayName = 'Triangle'\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nexport const Circle = () => (\n  <>\n    <h3 className='ui-header'>.circle(size, cx, cy)</h3>\n    <p>\n      .circle is drawn from center points (cx & cy). The cursor is then moved to\n      the center points.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().circle(95, 50, 50).toString()} />\n      <path d={new Path().circle(10, 50, 50).toString()} className='filled' />\n    </Svg>\n  </>\n);\n\nCircle.displayName = 'Circle'\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nexport const Ellipse = () => (\n  <>\n    <h3 className='ui-header'>.ellipse(width, height, cx, cy)</h3>\n    <p>\n      .ellipse is drawn from center point (cx & cy). The cursor is then moved to\n      the center point.\n    </p>\n    <Svg width={155} height={120}>\n      <path d={new Path().ellipse(150, 75, 80, 50).toString()} />\n      <path\n        d={new Path().ellipse(15, 7.5, 80, 50).toString()}\n        className='filled'\n      />\n    </Svg>\n  </>\n);\n\nEllipse.displayName = 'Ellipse'\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nexport const Segment = () => (\n  <>\n    <h3 className='ui-header'>\n      .segment(cx, cy, radius, startAngle, endAngle)\n    </h3>\n    <p>\n      .segment is drawn from center point (cx & cy). The cursor is then moved to\n      the center point.\n    </p>\n\n    <Svg width={140} height={120}>\n      <path d={new Path().segment(60, 60, 50, 0, 270).toString()} />\n      <path d={new Path().circle(10, 60, 60).toString()} className='filled' />\n    </Svg>\n  </>\n);\n\nSegment.displayName = 'Segment'\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nexport const Sector = () => (\n  <>\n    <h3 className='ui-header'>.sector(cx, cy, radius, startAngle, endAngle)</h3>\n    <p>\n      .sector is drawn from center point (cx & cy). The cursor is then moved to\n      the center point.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().sector(60, 60, 50, 0, 270).toString()} />\n      <path d={new Path().circle(10, 60, 60).toString()} className='filled' />\n    </Svg>\n  </>\n);\n\nSector.displayName = 'Sector'\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nconst points = [\n  [10, 60],\n  [40, 0],\n  [70, 60],\n  [40, 120]\n];\n\nexport const Polygon = () => (\n  <>\n    <h3 className='ui-header'>.polygon([points])</h3>\n    <p>\n      .polygon accepts an array of [x, y] coordinates and then draws lines\n      connecting those points. The path will start from the first point and end\n      on the first point - closing the shape.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().polygon(points).toString()} />\n    </Svg>\n  </>\n);\n\nPolygon.displayName = 'Polygon'\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nexport const RegPolygon = () => (\n  <>\n    <h3 className='ui-header'>.regPolygon(size, sides, cx, cy)</h3>\n    <p>\n      .regPolygon is drawn from center point (cx & cy). The cursor is then moved\n      to the center point.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().regPolygon(100, 6, 50, 50).toString()} />\n      <path\n        d={new Path().regPolygon(10, 6, 50, 50).toString()}\n        className='filled'\n      />\n    </Svg>\n  </>\n);\n\nRegPolygon.displayName = 'RegPolygon'\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nconst pointsAbsolute = [\n  [10, 60],\n  [40, 0],\n  [70, 60],\n  [40, 120]\n];\n\nconst pointsRelative = [\n  [10, 60],\n  [30, -60],\n  [30, 60],\n  [-30, 60]\n];\nexport const Polyline = () => (\n  <>\n    <h3 className='ui-header'>.polyline([points], relative = false)</h3>\n    <p>\n      .polyline accepts an array of [x, y] coordinates and then draws lines\n      connecting those points. The path will start from the first point and end\n      on the last. points can be absolute or relative.\n    </p>\n    <h4 className='ui-header'>absolute</h4>\n    <Svg width={260} height={160}>\n      <path d={new Path().polyline(pointsAbsolute).toString()} />\n    </Svg>\n    <h4 className='ui-header'>relative</h4>\n    <Svg width={260} height={160}>\n      <path d={new Path().polyline(pointsRelative, true).toString()} />\n    </Svg>\n  </>\n);\n\nPolyline.displayName = 'Polyline'\n","import React from 'react';\nimport Path from 'react-svg-path';\n\nconst Pie = ({ size, cx, cy, data }) => {\n  const percentToDegree = (p) => (p / 100) * 360;\n  const sectors = [];\n  let total = 0;\n  data.forEach((d, i) => {\n    const startAngle = percentToDegree(total);\n    const endAngle = percentToDegree(total + d.percent);\n    const p = new Path();\n    p.sector(cx, cy, size / 2, startAngle, endAngle);\n    sectors.push(p.toComponent({ key: i, fill: d.color }));\n    total = total + d.percent;\n  });\n\n  return (\n      <g>{sectors}</g>\n  );\n};\n\nexport default Pie;\n","import React from 'react';\nimport Path from 'react-svg-path';\n\nconst Donut = ({ size, width, cx, cy, data, ...rest }) => {\n  const percentToDegree = (p) => (p / 100) * 360;\n  const segments = [];\n  let total = 0;\n  data.forEach((d, i) => {\n    const startAngle = percentToDegree(total);\n    const endAngle = percentToDegree(total + d.percent);\n    const p = new Path();\n    p.segment(cx, cy, (size - width) / 2, startAngle, endAngle);\n    segments.push(\n      p.toComponent({\n        key: i,\n        strokeWidth: width,\n        stroke: d.color,\n        fill: 'none'\n      })\n    );\n    total = total + d.percent;\n  });\n\n  return <g>{segments}</g>;\n};\n\nexport default Donut;\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport Svg from '../../helpers/Svg';\n\nconst Grid = ({ x, y, width, height, cols, rows, close = true }) => {\n  const lines = new Path().M(x, y);\n  const extra = close ? 1 : 0;\n  const colWidth = width / cols;\n  const rowHeight = height / rows;\n  Array.from({ length: cols + extra }).map((_, index) =>\n    lines.M(x + index * colWidth, y).down(height)\n  );\n  Array.from({ length: rows + extra }).map((_, index) =>\n    lines.M(x, y + index * rowHeight, y).right(width)\n  );\n  return <path d={lines.toString()} stroke='#ddd' />;\n};\n\nconst SparkLine = ({ width, height, data }) => {\n  const sparkline = new Path();\n  const zero = height / 2;\n  const pointDistance = parseInt(width / data.length);\n  const points = data.map((d, index) => {\n    if (index !== 0) {\n      const prev = data[index - 1];\n      return [pointDistance, prev - d];\n    } else {\n      return [pointDistance, d];\n    }\n  });\n  points.unshift([0, zero + data.reduce((a, b) => a + b) / 2 - 10]);\n  sparkline.polyline(points, true);\n\n  return (\n    <Svg width={width + 1} height={height + 1}>\n      <Grid x={0} y={0} width={width} height={height} rows={10} cols={20} />\n      <path d={sparkline.toString()} stroke='red' fill='none' />\n      <path\n        d={new Path().rect(width, height, width / 2, height / 2)}\n        fill='none'\n        stroke='#333'\n      />\n    </Svg>\n  );\n};\n\nexport default SparkLine;\n","import React from \"react\";\nimport DagSinglePath from \"./components/demos/dag/DagSinglePath\";\nimport DagTwoPaths from \"./components/demos/dag/DagTwoPaths\";\nimport DagNodes from \"./components/demos/dag/DagNodes\";\nimport Macros from \"./components/demos/Macros\";\n\nimport {\n  Rect,\n  Square,\n  Circle,\n  Ellipse,\n  Segment,\n  Sector,\n  Polygon,\n  RegPolygon,\n  Triangle,\n  Polyline,\n} from \"./components/demos/basic\";\nimport Svg from \"./components/helpers/Svg\";\nimport Pie from \"./components/demos/complex/Pie\";\nimport Donut from \"./components/demos/complex/Donut\";\nimport SparkLine from \"./components/demos/complex/SparkLine\";\n\nimport \"./App.css\";\nconst App = () => {\n  const basicDemos = [\n    Rect,\n    Square,\n    Triangle,\n    RegPolygon,\n    Ellipse,\n    Circle,\n    Sector,\n    Segment,\n    Polyline,\n    Polygon,\n  ];\n\n  const pieData = [\n    {\n      color: \"#086972\",\n      percent: 20,\n      nested: [\n        { color: \"rgba(0,100,25,0.9)\", percent: 10 },\n        { color: \"rgba(0,100,25,0.8)\", percent: 10 },\n      ],\n    },\n    {\n      color: \"#01a9b4\",\n      percent: 30,\n      nested: [\n        { color: \"rgba(0,100,25,0.7)\", percent: 10 },\n        { color: \"rgba(0,100,25,0.6)\", percent: 10 },\n        { color: \"rgba(0,100,25,0.5)\", percent: 10 },\n      ],\n    },\n    {\n      color: \"#87dfd6\",\n      percent: 50,\n      nested: [\n        { color: \"rgba(0,100,25,0.4)\", percent: 25 },\n        { color: \"rgba(0,100,25,0.3)\", percent: 25 },\n      ],\n    },\n  ];\n  return (\n    <>\n      <h2>react-svg-path</h2>\n      <hr />\n      <a href=\"https://github.com/joemaddalone/react-svg-path\">\n        https://github.com/joemaddalone/react-svg-path\n      </a>\n\n      <h3 className=\"ui-header\">Demos</h3>\n      <p>\n        The svg element below contains only a single path. This may not be\n        ideal, depending on your needs, but it demonstrates the ability to\n        create complex shapes in a single path with react-svg-path\n      </p>\n      <div className=\"dag\">\n        <div style={{ margin: 20 }}>\n          <DagSinglePath />\n          <a\n            href=\"https://github.com/joemaddalone/react-svg-path/blob/master/example/src/components/demos/DagSinglePath.js\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            source\n          </a>\n        </div>\n        <p>\n          We can easily convert this to two paths. One for the nodes and one for\n          the connecting lines.\n        </p>\n        <div style={{ margin: 20 }}>\n          <DagTwoPaths />\n          <a\n            href=\"https://github.com/joemaddalone/react-svg-path/blob/master/example/src/components/demos/DagTwoPaths.js\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            source\n          </a>\n        </div>\n        <p>\n          Likewise we can use .toComponent() to create reusable components for\n          each node. Each of these nodes is clickable.\n        </p>\n        <div style={{ margin: 20 }}>\n          <DagNodes />\n          <a\n            href=\"https://github.com/joemaddalone/react-svg-path/blob/master/example/src/components/demos/DagNodes.js\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            source\n          </a>\n        </div>\n      </div>\n\n      <p>Macros are a way to save a common set of path steps for reuse.</p>\n      <div style={{ margin: 20 }}>\n        <Macros />\n        <a\n          href=\"https://github.com/joemaddalone/react-svg-path/blob/master/example/src/components/demos/Macros.js\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </div>\n      <p>Macros are so nice we included a bunch for you.</p>\n      <div className=\"basic-shapes\">\n        <h2 className=\"ui-header\">Basic Shapes</h2>\n        {basicDemos.map((C, i) => (\n          <span key={i}>\n            <C />\n            <a\n              href={`https://github.com/joemaddalone/react-svg-path/blob/master/example/src/components/demos/basic/${C.displayName}.js`}\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              source\n            </a>\n          </span>\n        ))}\n      </div>\n\n      <h2 className=\"ui-header\">Combining Shapes</h2>\n      <div className=\"complex\">\n        <h3 className=\"ui-header\">multiple .sectors</h3>\n        <Svg width={250} height={160}>\n          <Pie size={150} cx={80} cy={80} data={pieData} />\n        </Svg>\n        <a\n          href={`https://github.com/joemaddalone/react-svg-path/blob/master/example/src/components/demos/complex/Pie.js`}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n        <h3 className=\"ui-header\">multiple .segments</h3>\n        <Svg width={250} height={160}>\n          <Donut width={25} size={150} cx={80} cy={80} data={pieData} />\n        </Svg>\n        <a\n          href={`https://github.com/joemaddalone/react-svg-path/blob/master/example/src/components/demos/complex/Donut.js`}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n        <h3 className=\"ui-header\">multiple .sectors + .segments</h3>\n        <Svg width={180} height={180}>\n          <Pie size={130} cx={90} cy={90} data={pieData} />\n          <Donut\n            width={20}\n            size={175}\n            cx={90}\n            cy={90}\n            stroke=\"#fff\"\n            data={pieData.map((pd) => pd.nested).flat()}\n          />\n        </Svg>\n        <h3 className=\"ui-header\">fitted .polyline</h3>\n        <SparkLine\n          width={300}\n          height={150}\n          data={[-10, -45, 10, 0, 35, 10, -9, 25, 15, 75]}\n        />\n        <a\n          href={`https://github.com/joemaddalone/react-svg-path/blob/master/example/src/components/demos/complex/SparkLine.js`}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}