{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["constructor","val","relative","x","y","cx","ex","rx","ry","rotation","arc","sweep","px","key","Math","React","Square","size","Path","moveTo","lineTo","close","stroke","toElement","Circle","radius","M","m","a","style","fill","SparkLine","width","data","path","strokeWidth","pointDistance","parseInt","length","forEach","index","arr","prev","l","App","xmlns","height","viewBox","preserveAspectRatio","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be93d67c.chunk.js","sourcesContent":["import React from 'react';\n\nclass Path extends React.Component {\n  constructor() {\n    super();\n    this.pathData = [];\n    this.attributes = {};\n\n    return this;\n  }\n\n  attr = (key, val) => {\n    this.attributes[key] = val;\n    return this;\n  };\n\n  fill = (val) => this.attr('fill', val);\n  stroke = (val) => this.attr('stroke', val);\n  strokeWidth = (val) => this.attr('strokeWidth', val);\n  style = (val) => this.attr('style', val);\n  /**\n   * Move svg cursor to x, y.\n   */\n  m = (x, y) => this.moveTo(x, y, true);\n  M = (x, y) => this.moveTo(x, y);\n  moveTo = (x, y, relative = false) => {\n    this.pathData.push(`${relative ? 'm' : 'M'}${x} ${y}`);\n    return this;\n  };\n\n  /**\n   * Draw straight line to x, y.\n   */\n  l = (x, y) => this.lineTo(x, y, true);\n  L = (x, y) => this.lineTo(x, y);\n  lineTo = (x, y, relative = false) => {\n    this.pathData.push(`${relative ? 'l' : 'L'}${x} ${y}`);\n    return this;\n  };\n\n  /**\n   * Draw a horizontal line to x.\n   */\n  H = (x) => this.horizontalTo(x);\n  h = (x) => this.horizontalTo(x, true);\n  horizontalTo = (x, relative = false) => {\n    this.pathData.push(`${relative ? 'h' : 'H'}${x}`);\n    return this;\n  };\n\n  /**\n   * Draw a vertical line to y.\n   */\n  V = (y) => this.verticalTo(y);\n  v = (y) => this.verticalTo(y, true);\n  verticalTo = (x, relative = false) => {\n    this.pathData.push(`${relative ? 'v' : 'V'}${x}`);\n    return this;\n  };\n\n  /**\n   * Draw quadratic curve to ex, ey using cx,cy as the control point.\n   */\n  Q = (cx, cy, ex, ey) => this.qCurveTo(cx, cy, ex, ey);\n  q = (cx, cy, ex, ey) => this.qCurveTo(cx, cy, ex, ey, true);\n  qCurveTo = (cx, cy, ex, ey, relative = false) => {\n    this.pathData.push(`${relative ? 'q' : 'Q'}${cx} ${cy}`);\n    this.pathData.push(`${ex} ${ey}`);\n    return this;\n  };\n\n  T = (ex, ey) => {\n    this.pathData.push(`T ${ex} ${ey}`);\n    return this;\n  };\n\n  t = (ex, ey) => {\n    this.pathData.push(`t ${ex} ${ey}`);\n    return this;\n  };\n\n  S = (cx, cy, ex, ey) => this.sCurveTo(cx, cy, ex, ey);\n  s = (cx, cy, ex, ey) => this.sCurveTo(cx, cy, ex, ey, true);\n  sCurveTo = (cx, cy, ex, ey, relative = false) => {\n    this.pathData.push(`${relative ? 's' : 'S'}${cx} ${cy}`);\n    this.pathData.push(`${ex} ${ey}`);\n    return this;\n  };\n\n  C = (cx1, cy1, cx2, cy2, ex, ey) => this.cCurveTo(cx1, cy1, cx2, cy2, ex, ey);\n  c = (cx1, cy1, cx2, cy2, ex, ey) =>\n    this.cCurveTo(cx1, cy1, cx2, cy2, ex, ey, true);\n\n  cCurveTo = (cx, cy, ex, ey, relative = false) => {\n    this.pathData.push(`${relative ? 's' : 'S'}${cx} ${cy}`);\n    this.pathData.push(`${ex} ${ey}`);\n    return this;\n  };\n\n  A = (rx, ry, rotation, arc, sweep, ex, ey) =>\n    this.arc(rx, ry, rotation, arc, sweep, ex, ey);\n\n  a = (rx, ry, rotation, arc, sweep, ex, ey) =>\n    this.arc(rx, ry, rotation, arc, sweep, ex, ey, true);\n\n  arc = (rx, ry, rotation, arc, sweep, ex, ey, relative = false) => {\n    this.pathData.push(\n      `${\n        relative ? 'a' : 'A'\n      }${rx} ${ry} ${rotation} ${arc} ${sweep} ${ex} ${ey}`\n    );\n    return this;\n  };\n\n  down = (px) => this.v(px);\n  up = (px) => this.v(px * -1);\n  right = (px) => this.h(px);\n  left = (px) => this.h(px * -1);\n\n  Down = (px) => this.V(px);\n  Up = (px) => this.V(px * -1);\n  Right = (px) => this.H(px);\n  Left = (px) => this.H(px * -1);\n\n  /**\n   * Close path.\n   */\n  close = () => {\n    this.pathData.push('z');\n    return this;\n  };\n\n  /**\n   * Return pathData array.\n   */\n  toArray = () => this.pathData;\n\n  /**\n   * Return joined pathData array.\n   */\n  toString = () => this.pathData.join(' ');\n\n  toComponent = (key) => () => this.toElement(key);\n\n  toElement = (key = Math.random()) => (\n    <path key={key} d={this.toString()} {...this.attributes} />\n  );\n}\n\nexport default Path;\n","import React from 'react';\nimport Path from 'react-svg-path';\nimport './App.css';\n\nconst Square = ({ x, y, size }) => {\n  const path = new Path()\n    .moveTo(x, y)\n    .lineTo(x + size, y)\n    .lineTo(x + size, y + size)\n    .lineTo(x, y + size)\n    .close()\n    .stroke('red');\n  return path.toElement();\n};\n\nconst Circle = ({ x, y, radius }) => {\n  const path = new Path()\n    .M(x, y)\n    .m(-radius, 0)\n    .a(radius, radius, 0, 1, 0, radius * 2, 0)\n    .a(radius, radius, 0, 1, 0, -(radius * 2), 0)\n    .style({ fill: 'green' });\n  return path.toElement();\n};\n\nconst SparkLine = ({ x, y, width, data }) => {\n  const path = new Path().moveTo(x, y).stroke('purple').strokeWidth(2);\n  const pointDistance = parseInt(width / data.length);\n  data.forEach((val, index, arr) => {\n    if (index !== 0) {\n      const prev = arr[index - 1];\n      path.l(pointDistance, prev - val);\n    } else {\n      path.l(0, -val);\n    }\n  });\n  return path.toElement();\n};\n\nconst App = () => {\n  const width = 800;\n  const height = 800;\n  return (\n    <svg\n      xmlns='http://www.w3.org/2000/svg'\n      width={width}\n      height={height}\n      viewBox={`0 0 ${width} ${height}`}\n      preserveAspectRatio='none'\n    >\n      <Square x={50} y={50} size={50} />\n      <Circle x={200} y={75} radius={50} />\n      <SparkLine\n        x={25}\n        y={200}\n        width={250}\n        data={[0, 10, 5, 25, 15, 35, 5, 18, 50, 3, 25, 2, 35, 10]}\n      />\n    </svg>\n  );\n};\n\nexport default App;\n","\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}