import React from 'react';
import Square from './components/Square';
import Circle from './components/Circle';
import Grid from './components/Grid';
import Sparkline from './components/Sparkline';
import Svg from './components/Svg';
import Steps from './components/demos/Steps';
import Dag from './components/demos/Dag';
import docs from './docs/docs.json';
import './App.css';

const CommandList = ({ section }) => (
  <ul>
    {Object.keys(docs[section]).map((key) => {
      const command = docs[section][key];
      return (
        <li key={key}>
          <b>{key}</b>(<i>{command.args.join(',')}</i>){}
          {command.description && (
            <ul>
              <li
                dangerouslySetInnerHTML={{
                  __html: command.description
                }}
              />
            </ul>
          )}
        </li>
      );
    })}
  </ul>
);

const App = () => {
  return (
    <>
      <h2>react-svg-path</h2>
      <Svg width={400} height={400}>
        <Grid x={0} y={0} width={500} height={500} cols={25} rows={25} />
        <g transform='translate(50,75)'>
          <Square
            x={50}
            y={50}
            size={50}
            stroke='red'
            strokeWidth={2}
            fill='red'
          />
          <Circle x={200} y={75} radius={50} fill='green' />
          <Circle x={215} y={90} radius={25} fill='white' />
          <Circle x={220} y={90} radius={15} fill='black' />
          <Circle x={215} y={80} radius={5} fill='white' />
          <Sparkline
            x={25}
            y={200}
            width={250}
            data={[0, 10, 5, 25, 15, 35, 5, 18, 50, 3, 25, 2, 35, 10]}
          />
        </g>
      </Svg>
      <hr />
      <a href='https://github.com/joemaddalone/react-svg-path'>
        https://github.com/joemaddalone/react-svg-path
      </a>

      <h2 className='ui-header'>Getting started</h2>
      <code>npm install --save react-svg-path</code>
      <p>then in your own code:</p>
      <code>import Path from 'react-svg-path'</code>
      <p>
        react-svg-path is mostly helpful for building the commands needed for
        the "d" attribute of an svg path.
      </p>
      <p>
        Most methods are direct translations from the{' '}
        <a
          rel='noopener noreferrer'
          href='https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths'
          target='_blank'
        >
          SVG Path specification
        </a>
        .
      </p>
      <h4 className='ui-header'>Example</h4>
      <code>&lt;path d="M0 0, L0 100">&lt;/path></code>
      <b>This path can be produced with:</b>
      <code>const path = new Path().M(0,0).L(0,100);</code>
      <code>console.log(path.toString()) // M0 0, L0 100</code>
      <h3 className='ui-header'>Path Commands</h3>
      <p>
        For every svg path command there is an equivalent command available in
        react-svg-path.
      </p>
      <CommandList section='commands' />
      <p>
        And then for most of these is there is a semantically named helper
        method. Not required, but for complex paths it may be easier to read for
        those not familiar with path commmands.
      </p>
      <CommandList section='semanticCommands' />
      <p>Some additional path command helpers:</p>
      <CommandList section='helpers' />
      <p>One more path command helper</p>
      <ul>
        <li>
          <b>close</b>()
        </li>
        <ul>
          <li>
            Produces a "Z" command which draws a stright line back to the first
            point of the path.
          </li>
        </ul>
      </ul>
      <h3 className='ui-header'>Path Attributes</h3>
      <p>
        If you intend to output an actual path element and not just the set of
        commands attributes can be set on the element using the <b>attr</b>{' '}
        helper.
      </p>
      <ul>
        <li>
          <b>attr</b>(<i>key, value</i>)
        </li>
        <ul>
          <li>
            example: attr('id', 'my-id') will result in &lt;path
            id="my-id">&lt;/path>
          </li>
        </ul>
      </ul>
      <p>Built-in attribute helpers</p>
      <ul>
        <li>
          <b>fill</b>(<i>val</i>)
        </li>
        <li>
          <b>stroke</b>(<i>val</i>)
        </li>
        <li>
          <b>strokeWidth</b>(<i>val</i>)
        </li>
        <li>
          <b>style</b>(<i>val</i>)
        </li>
      </ul>
      <h3 className='ui-header'>Rendering</h3>
      <p>
        Depending on your needs there are few ways to use the data generated by
        react-svg-path.
      </p>
      <ul>
        <li>
          <b>toArray</b>
          <ul>
            <li>Returns an array of path commands</li>
          </ul>
        </li>
        <li>
          <b>toString</b>
          <ul>
            <li>Returns a string of path commands</li>
          </ul>
        </li>
        <li>
          <b>toElement</b>
          <ul>
            <li>Returns path jsx incuding attributes</li>
          </ul>
        </li>
        <li>
          <b>toComponent(props)</b>
          <ul>
            <li>same as toElement, but allows additional props</li>
          </ul>
        </li>
      </ul>
      <h3 className='ui-header'>Demos</h3>
      <h4 className='ui-header'>Single paths</h4>
      <p>
        Each of the svg elements below contains only a single path. This may
        not be ideal, depending on your needs, but it demonstrates the ability to
        create complex shapes in a single path with react-svg-path
      </p>
      <div style={{ margin: 20 }}>
        <Svg height={150} width={750}>
          <Steps
            width={750}
            x={10}
            y={80}
            data={[10, 50, -50, 10, -25, 5, 32, 10]}
            strokeWidth={2}
            stroke='#aaa'
          />
        </Svg>
      </div>
      <div style={{ margin: 20 }}>
        <Dag />
      </div>
    </>
  );
};

export default App;
