{
	"common": {
		"source": "Source",
		"import": "Import",
		"example": "Example",
		"code": "Code",
		"props": "Props",
		"attributes": "Attributes",
		"addPoint": "Add Point"
	},
	"nav": {
		"introduction": "Introduction",
		"usage": "Usage",
		"shapes": "Shapes",
		"curves": "Curves",
		"behaviors": "Behaviors",
		"nesting": "Nesting",
		"additionalComponents": "Additional Components"
	},
	"circle": {
		"description": "Circle is drawn from center point (cx & cy). The cursor is then moved to the center point."
	},
	"ellipse": {
		"description": "Ellipse is drawn from center point (cx & cy). The cursor is then moved to the center points."
	},
	"polygon": {
		"description": "Polygon accepts an array of [x, y] coordinates and then draws lines connecting those points.  The path will start from the first point and end on the first point - closing the shape."
	},
	"polygram": {
		"description": "Polygram is drawn from center point (cx & cy). The first outer point of the shape will always be at top center. The cursor is then moved to the center point.  Skipping a vertex is what makes a polygram appear as intersecting lines, a vertexSkip of 1 will result in a regular polygon."
	},
	"polyline": {
		"description": "Polyline accepts an array of [x, y] coordinates and then draws lines connecting those points.  The path will start from the first point and end on the last.  points can be absolute or relative."
	},
	"line": {
		"description": "Line is drawn from starting points (sx & sy) to ending points (ex & ey). sx (starting x) & sy (starting y) will always be absolutely positioned, however with relative=true the ex and ey points can relative to sx & sy."
	},
	"radialLines": {
		"description": "RadialLines is drawn from center point (cx & cy). The first outer point of the shape will always be at top center. The cursor is then moved to the center point."
	},
	"rect": {
		"description": "Rect is drawn from center point (cx & cy). The cursor is then moved to the center point."
	},
	"regPolygon": {
		"description": "RegPolygon is drawn from center point (cx & cy). The first outer point of the shape will always be at top center. The cursor is then moved to the center point."
	},
	"sector": {
		"description": "Sector is drawn from center point (cx & cy). The cursor is then moved to the center point."
	},
	"segment": {
		"description": "Segment is drawn from center point (cx & cy). The cursor is then moved to the center point."
	},
	"square": {
		"description": "Square is drawn from center point (cx & cy). The cursor is then moved to the center point."
	},
	"star": {
		"description": "Star is drawn from center point (cx & cy). The first outer point of the shape will always be at top center. The cursor is then moved to the center point."
	},
	"triangle": {
		"description": "Triangle draws an equilateral triangle from center point (cx & cy). The cursor is then moved to the center point."
	},
	"arc": {
		"description": "Arc is drawn..."
	},
	"cubic": {
		"description": "Cubic is drawn..."
	},
	"quad": {
		"description": "Quad is drawn..."
	},
	"pages": {
		"introduction": {
			"title": "Introduction",
			"intro": "react-svg-path makes composing svg elements dead simple. Everything is a path. Have fun.",
			"installation": "Installations",
			"stuffTitle": "Stuff",
			"stuff": "There are a lot of docs (always a work in progress), but here's some fun stuff made with react-svg-path."
		},
		"centerEnd": {
			"title": "centerEnd",
			"intro": "Some components in react-svg-path are guaranteed to end at their center points. This behavior can be turned off with <i>centerEnd={false}</i>. Nested components will still recieve the center x & y from parents.",
			"square": "Square new end x & y",
			"circle": "Circle still inherits center cx & cy",
			"another": "Another demo",
			"startingPoint": "Starting point",
			"endingPoint": "Ending point"
		},
		"toComponent": {
			"title": "Path.toComponent(props)",
			"description": ".toComponents returns a componentized path object.",
			"description2": "By returning .toComponent in our Triangle component we have now created a re-usable building block for ourselves"
		},
		"pathMerge": {
			"title": "PathMerge",
			"intro": "While having composable components make designing complex svg withmultiple paths simple you may find a situation where a single path is more desirable. Why not do both with <PathMerge>?",
			"compose": "As shown previously we can compose our paths from multiple components",
			"composeResult": "The resulting output of the above looks like this",
			"wrapIn": "However we can wrap these components in <PathMerge>",
			"wrapInResult": "The resulting output is a single path where all path data has been combined.",
			"nested": "This is also possible with nested elements"
		},
		"markers": {
			"title": "Markers",
			"intro": "Markers can be added to end, middle, or start points of any path. Markers will \"point\" in the direction and angle of the path.",
			"usage": "Usage",
			"arrow": "Accepts any svg path attribute and a <b>color</b> prop",
			"triangle": "Accepts any svg path attribute and a <b>color</b> prop",
			"line": "Accepts any svg path attribute, a <b>size</b> prop, and a <b>color</b> prop",
			"square": "Accepts any svg path attribute, a <b>size</b> prop, and a <b>color</b> prop",
			"startLabel": "Marker start",
			"endLabel": "Marker end",
			"midLabel": "Marker middle"
		},
		"textPath": {
			"title": "TextPath",
			"intro": "You can use the TextPath component to have text follow a specific path. The path can be made from any existing path components or your own.",
			"withComponent": "With existing components",
			"withCircle": "Here we've used a <Circle> component as the path. We also passed in an optional \"id\" value so we can reference the path later if we need to. Otherwise an id will be generated for you.",
			"withQuad": "Here we've used a <Quad> component as the path.",
			"withCustom": "With a custom path",
			"withCustomDescription": "Here we've passed in our own path commands as the path.",
			"exampleText": "This is a thing.  There are many like it, but this one is mine."
		},
		"nesting": {
			"title": "Nesting Components",
			"intro": "react-svg-path allows you to nest the paths created by components - this is normally not possible in svg. The rendered output will still be separate paths. However when nesting components the child component will inherit a starting point at the parent's ending point. And you can do this endlessly!",
			"example1": "Nesting example 1",
			"example2": "Nesting example 2",
			"example3": "Nesting example 3",
			"centerPoints": "Since all of our shape components start and end in the center nesting multiple will result in all of them sharing the same center points.",
			"end": "Adding one or more shapes or even <Text> to the end of any other shapes requires very little effort.",
			"start": "This can be reversed to use the parent starting point with the attach prop. The attach prop is set to `end` by default and can be set to `start`.",
			"mix": "And you can mix an match with multiple nested components",
			"oxOy": "You can alter an inherited value using <b>ox</b> (offset x) or <b>oy</b> (offset y).",
			"noCxCy": "no need for cx or cy",
			"cyOver": "cx inherited, cy overwritten",
			"zeroCircle": "center point with a zero size circle.  neat.",
			"offsetY": "offset the y coordinate by -20",
			"offsetX": "offset x to center of line"
		},
		"svg": {
			"title": "Svg",
			"intro": "&lt;Svg> acts mostly as a dumb container component.  It takes in a width & height prop and passes that directly into a standard &lt;svg> element.  It also passes that width and height in the &lt;svg> viewbox attribute as <i>viewBox=\"0 0 width height\"</i>.  You are free to overwrite any attributes as needed by passing them into the component as props.  You can also substitute a standard &lt;svg> element.",
			"oneFeature": "One special feature of <Svg>",
			"nesting": "Like most of the components in react-svg-path  <Svg> will pass it's center point to it's children as a starting, ending, or center point depending on the child component.",
			"exampleText": "Circle at center of svg."
		},
		"distance": {
			"title": "Distance",
			"intro": "&lt;Distance> acts mostly the same as &ltLine>. It takes in the same props (sx, sy, ex, ey, etc.).  The primary difference being how markers are applied and the fact that it will present a value in the middle if the line representing the distance value of the line.",
			"pixelsDefault": "Pixels by default",
			"pixelsDefaultDescription": "By default the distance value will be in pixels.  Passing in a color prop sets the color of both the line and the text.",
			"color": "Adding color",
			"colorDescription": "Passing in a color prop sets the color of both the line and the text.",
			"dotted": "Dotted lines",
			"dottedDescription": "Make a Distance line dotted by passing in the dotted prop",
			"text": "Use a custom value",
			"textDescription": "Add any value you like with the text prop",
			"markers": "Adding markers",
			"markersDescription": "Markers can be set at the end with <i>markerEnd</i>, start with <i>markerStart</i>, or both with <i>markers</i>.  Acceptable values are `arrow`, `triangle`, `square`, and `line`",
			"scale": "Representing a scale",
			"scaleDescription": "a scale can be presented by passing in scale & scaleUnit props"
		},
		"path": {
			"title": "Path",
			"intro": "This library wraps <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/joemaddalone/path\">https://github.com/joemaddalone/path</a> and further documentation can be found there. This library adds one additional rendering method to path.<br><i>Path.toComponent(props)</i> returns a jsx function including attributes and props.",
			"example": "This path can be produced with:",
			"pathCommands": "Path Commands",
			"pathCommandsIntro": "For every svg path command there is an equivalent command available in path.",
			"pathHelpers": "And then for most of these is there is a semantically named helper method. Not required, but for complex paths it may be easier to read for those not familiar with path commmands.",
			"pathAdditionalHelpers": "Some additional path command helpers:",
			"shapes": "Shapes",
			"commands": {
				"arc": {
					"description": "relative is optional, its default is false. Setting relative to true is equivalent to a"
				},
				"cCurve": {
					"description": "relative is optional, its default is false. Setting relative to true is equivalent to c"
				},
				"horizontalTo": {
					"description": "relative is optional, its default is false. Setting relative to true is equivalent to h"
				},
				"verticalTo": {
					"description": "relative is optional, its default is false. Setting relative to true is equivalent to v"
				},
				"lineTo": {
					"description": "relative is optional, its default is false. Setting relative to true is equivalent to l"
				},
				"moveTo": {
					"description": "relative is optional, its default is false. Setting relative to true is equivalent to m"
				},
				"qCurve": {
					"description": "relative is optional, its default is false. Setting relative to true is equivalent to q"
				},
				"sCurveTo": {
					"description": "relative is optional, its default is false. Setting relative to true is equivalent to s"
				},
				"tCurveTo": {
					"description": "relative is optional, its default is false. Setting relative to true is equivalent to t"
				},
				"down": {
					"description": "Draw line from current position down by px"
				},
				"up": {
					"description": "Draw line from current position up by px"
				},
				"left": {
					"description": "Draw line from current position left by px"
				},
				"right": {
					"description": "Draw line from current position right by px"
				},
				"close": {
					"description": "Produces a \"Z\" command which draws a stright line back to the first point of the path."
				},
				"circle": {
					"description": ".circle is drawn from center points (cx & cy). The cursor is then moved to the center points."
				},
				"ellipse": {
					"description": ".ellipse is drawn from center point (cx & cy). The cursor is then moved to the center point."
				},
				"polygon": {
					"description": ".polygon accepts an array of [x, y] coordinates and then draws lines connecting those points.  The path will start from the first point and end on the first point - closing the shape."
				},
				"polygram": {
					"description": ".polygram is drawn from center point (cx & cy). The first outer point of the shape will always be at top center. The cursor is then moved to the center point.  Skipping a vertex is what makes a polygram appear as intersecting lines, a vertexSkip of 1 will result in a regular polygon."
				},
				"polyline": {
					"description": ".polyline accepts an array of [x, y] coordinates and then draws lines connecting those points.  The path will start from the first point and end on the last.  points can be absolute or relative."
				},
				"radialLines": {
					"description": ".radialLines is drawn from center point (cx & cy). The first outer point of the shape will always be at top center. The cursor is then moved to the center point."
				},
				"rect": {
					"description": ".rect is drawn from center point (cx & cy). The cursor is then moved to the center point."
				},
				"regPolygon": {
					"description": ".regPolygon is drawn from center point (cx & cy). The first outer point of the shape will always be at top center. The cursor is then moved to the center point."
				},
				"sector": {
					"description": ".sector is drawn from center point (cx & cy). The cursor is then moved to the center point."
				},
				"segment": {
					"description": ".segment is drawn from center point (cx & cy). The cursor is then moved to the center point."
				},
				"square": {
					"description": ".square is drawn from center point (cx & cy). The cursor is then moved to the center point."
				},
				"star": {
					"description": ".star is drawn from center point (cx & cy). The first outer point of the shape will always be at top center. The cursor is then moved to the center point."
				},
				"triangle": {
					"description": ".triangle draws an equilateral triangle from center point (cx & cy). The cursor is then moved to the center point."
				}
			}
		}
	}
}